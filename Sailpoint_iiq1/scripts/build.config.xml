<?xml version="1.0" encoding="UTF-8"?>
<project name="services.standard.build.config.xml">

    <!-- ********************************************************** -->
    <!-- targets responsible for taking custom xml, doing environment token replacement and making a custom init.xml-->
    <!-- ********************************************************** -->

    <!-- import stock (default) iiq artifacts (no lcm, no custom stuff) -->
    <target name="import-stock" depends="-security.Init">
        <echo>Importing stock IIQ with: console iiqBeans -c "import
            '${build.iiqBinaryExtract}/WEB-INF/config/init-default_org.xml'"
        </echo>
        <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true"
              inputstring="${console_user}&#xA;${console_pass}&#xA;">
            <arg line="console iiqBeans -c &quot;import '${build.iiqBinaryExtract}/WEB-INF/config/init-default_org.xml'&quot;"/>
            <classpath>
                <pathelement path="${build.iiqBinaryExtract}/WEB-INF/classes"/>
                <pathelement location="${build.iiqBinaryExtract}/WEB-INF/lib/identityiq.jar"/>
            </classpath>
        </java>
    </target>

    <!-- import custom iiq artifacts) -->
    <target name="import-custom" depends="-security.Init">
        <echo>Importing custom objects with: console iiqBeans -c "import
            '${build.iiqBinaryExtract}/WEB-INF/config/sp.init-custom.xml'"
        </echo>
        <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true"
              inputstring="${console_user}&#xA;${console_pass}&#xA;">
            <arg line="console iiqBeans -c &quot;import '${build.iiqBinaryExtract}/WEB-INF/config/sp.init-custom.xml'&quot;"/>
            <classpath>
                <pathelement path="${build.iiqBinaryExtract}/WEB-INF/classes"/>
                <pathelement location="${build.iiqBinaryExtract}/WEB-INF/lib/identityiq.jar"/>
            </classpath>
        </java>
    </target>

    <!-- import stock (default) LCM-related iiq artifacts) -->
    <target name="import-lcm" depends="-security.Init">
        <if>
            <equals arg1="${usingLcm}" arg2="true"/>
            <then>
                <echo>Importing default LCM objects with: console iiqBeans -c "import
                    '${build.iiqBinaryExtract}/WEB-INF/config/init-lcm.xml'"
                </echo>
                <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true"
                      inputstring="${console_user}&#xA;${console_pass}&#xA;">
                    <arg line="console iiqBeans -c &quot;import '${build.iiqBinaryExtract}/WEB-INF/config/init-lcm.xml'&quot;"/>
                    <classpath>
                        <pathelement path="${build.iiqBinaryExtract}/WEB-INF/classes"/>
                        <pathelement location="${build.iiqBinaryExtract}/WEB-INF/lib/identityiq.jar"/>
                    </classpath>
                </java>
            </then>
            <else>
                <echo>Skipping lcm import, as lcm is not enabled (usingLcm is not "true" in build properties)</echo>
            </else>
        </if>
    </target>

    <!-- import stock (default) RS-related iiq artifacts) -->
    <target name="import-rs" depends="-security.Init">
        <if>
            <equals arg1="${usingRapidSetup}" arg2="true"/>
            <then>
                <echo>Importing Rapid Setup objects with: console iiqBeans -c "import
                    '${build.iiqBinaryExtract}/WEB-INF/config/init-rapidsetup.xml'"
                </echo>
                <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true"
                      inputstring="${console_user}&#xA;${console_pass}&#xA;">
                    <arg line="console iiqBeans -c &quot;import '${build.iiqBinaryExtract}/WEB-INF/config/init-rapidsetup.xml'&quot;"/>
                    <classpath>
                        <pathelement path="${build.iiqBinaryExtract}/WEB-INF/classes"/>
                        <pathelement location="${build.iiqBinaryExtract}/WEB-INF/lib/identityiq.jar"/>
                    </classpath>
                </java>
            </then>
            <else>
                <echo>Skipping Rapid Setup import, as Rapid Setup is not enabled (usingRapidSetup is not "true" in build properties)</echo>
            </else>
        </if>
    </target>
	
    <!-- import stock (default) PAM-related iiq artifacts) -->
    <target name="import-pam" depends="-security.Init">
        <if>
            <equals arg1="${usingPAM}" arg2="true"/>
            <then>
                <echo>Importing PAM Module objects with: console iiqBeans -c "import
                    '${build.iiqBinaryExtract}/WEB-INF/config/init-pam.xml'"
                </echo>
                <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true"
                      inputstring="${console_user}&#xA;${console_pass}&#xA;">
                    <arg line="console iiqBeans -c &quot;import '${build.iiqBinaryExtract}/WEB-INF/config/init-pam.xml'&quot;"/>
                    <classpath>
                        <pathelement path="${build.iiqBinaryExtract}/WEB-INF/classes"/>
                        <pathelement location="${build.iiqBinaryExtract}/WEB-INF/lib/identityiq.jar"/>
                    </classpath>
                </java>
            </then>
            <else>
                <echo>Skipping PAM Module import, as PAM is not enabled (usingPAM is not "true" in build properties)</echo>
            </else>
        </if>
    </target>

    <!-- import stock (default) FAM-related iiq artifacts) -->
    <target name="import-fam" depends="-security.Init">
        <if>
            <equals arg1="${usingFAM}" arg2="true"/>
            <then>
                <echo>Importing FAM objects with: console iiqBeans -c "import
                    '${build.iiqBinaryExtract}/WEB-INF/config/init-fam.xml'"
                </echo>
                <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true"
                      inputstring="${console_user}&#xA;${console_pass}&#xA;">
                    <arg line="console iiqBeans -c &quot;import '${build.iiqBinaryExtract}/WEB-INF/config/init-fam.xml'&quot;"/>
                    <classpath>
                        <pathelement path="${build.iiqBinaryExtract}/WEB-INF/classes"/>
                        <pathelement location="${build.iiqBinaryExtract}/WEB-INF/lib/identityiq.jar"/>
                    </classpath>
                </java>
            </then>
            <else>
                <echo>Skipping FAM import, as FAM is not enabled (usingFAM is not "true" in build properties)</echo>
            </else>
        </if>
    </target>

    <!-- import stock (default) CAM-related iiq artifacts) -->
    <target name="import-cam" depends="-security.Init">
        <if>
            <equals arg1="${usingCAM}" arg2="true"/>
            <then>
                <echo>Importing CAM objects with: console iiqBeans -c "import
                    '${build.iiqBinaryExtract}/WEB-INF/config/init-fam.xml'"
                </echo>
                <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true"
                      inputstring="${console_user}&#xA;${console_pass}&#xA;">
                    <arg line="console iiqBeans -c &quot;import '${build.iiqBinaryExtract}/WEB-INF/config/init-cam.xml'&quot;"/>
                    <classpath>
                        <pathelement path="${build.iiqBinaryExtract}/WEB-INF/classes"/>
                        <pathelement location="${build.iiqBinaryExtract}/WEB-INF/lib/identityiq.jar"/>
                    </classpath>
                </java>
            </then>
            <else>
                <echo>Skipping CAM import, as CAM is not enabled (usingCAM is not "true" in build properties)</echo>
            </else>
        </if>
    </target>

    <!-- import stock (default) AI-related iiq artifacts) -->
    <target name="import-ai" depends="-security.Init">
        <if>
            <equals arg1="${usingAI}" arg2="true"/>
            <then>
                <echo>Importing AI objects with: console iiqBeans -c "import
                    '${build.iiqBinaryExtract}/WEB-INF/config/init-ai.xml'"
                </echo>
                <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true"
                      inputstring="${console_user}&#xA;${console_pass}&#xA;">
                    <arg line="console iiqBeans -c &quot;import '${build.iiqBinaryExtract}/WEB-INF/config/init-ai.xml'&quot;"/>
                    <classpath>
                        <pathelement path="${build.iiqBinaryExtract}/WEB-INF/classes"/>
                        <pathelement location="${build.iiqBinaryExtract}/WEB-INF/lib/identityiq.jar"/>
                    </classpath>
                </java>
            </then>
            <else>
                <echo>Skipping AI import, as AI is not enabled (usingAI is not "true" in build properties)</echo>
            </else>
        </if>
    </target>
	
    <!-- import stock (default) AP-related iiq artifacts) -->
    <target name="import-ap" depends="-security.Init">
        <if>
            <equals arg1="${deployAcceleratorPack}" arg2="true"/>
            <then>
                <echo>Importing default Accelerator Pack objects with: console iiqBeans -c "import
                    '${build.iiqBinaryExtract}/WEB-INF/config/init-acceleratorpack.xml'"
                </echo>
                <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true"
                      inputstring="${console_user}&#xA;${console_pass}&#xA;">
                    <arg line="console iiqBeans -c &quot;import '${build.iiqBinaryExtract}/WEB-INF/config/init-acceleratorpack.xml'&quot;"/>
                    <classpath>
                        <pathelement path="${build.iiqBinaryExtract}/WEB-INF/classes"/>
                        <pathelement location="${build.iiqBinaryExtract}/WEB-INF/lib/identityiq.jar"/>
                    </classpath>
                </java>
            </then>
            <else>
                <echo>Skipping Accelerator Pack import, as Accelerator Pack is not enabled (deployAcceleratorPack is not "true" in build properties)</echo>
            </else>
        </if>
    </target>

    <!-- import all artfacts in order - stock iiq, stock lcm, stock Accelerator Pack, custom -->
    <target name="import-all">
        <echo>Calling import for stock iiq, stock lcm, stock Rapid Setup, stock PAM, stock FAM, stock CAM, stock AI, stock AP, then custom artifacts</echo>
        <antcall target="import-stock"/>
        <antcall target="import-lcm"/>
        <antcall target="import-rs"/>
        <antcall target="import-pam"/>
        <antcall target="import-fam"/>
        <antcall target="import-cam"/>
        <antcall target="import-ai"/>
    	<antcall target="import-ap"/>
        <antcall target="import-custom"/>
    </target>

    <!-- deprecated target for backwards compatiblity -->
    <target name="import">
        <echo message="target 'import' is DEPRECATED and may be removedin a future SSB release - use 'import-custom' instead..."/>
        <sleep seconds="5"/>
        <antcall target="import-custom"/>
    </target>

    <target name="runUpgrade" depends="-security.Init">
        <echo>Running patch command for ${IIQVersion}${IIQPatchLevel}</echo>
        <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true"
              inputstring="${console_user}&#xA;${console_pass}&#xA;">
            <arg line="patch ${IIQVersion}${IIQPatchLevel}"/>
            <classpath>
                <pathelement path="${build.iiqBinaryExtract}/WEB-INF/classes"/>
                <pathelement location="${build.iiqBinaryExtract}/WEB-INF/lib/identityiq.jar"/>
            </classpath>
        </java>
    </target>

    <target name="build-inits" depends="validatetokens,validate">
        <build-init initFile="${build.iiqBinaryExtract}/WEB-INF/config/sp.init-custom.xml">
            <fileset dir="${build.iiqBinaryExtract}/WEB-INF/config">
                <include name="custom/**/*.xml"/>
                <include name="custom/**/*.XML"/>
                <include name="custom/**/*.jrxml"/>
                <exclude name="custom/**/*-init.xml"/>
                <exclude name="custom/**/*.hbm.xml"/>
                <exclude name="custom/**/cert_*.xml"/>
                <exclude name="custom/**/template*/*.xml"/>
                <!-- Do not move over the template xml into the build dir -->
                <exclude name="custom/**/*Template.xml"/>

                <!-- 
                Exclude items named in this target's excludes file.
                each line in the file is treated as an exclusion pattern.
                for this use here, (and the import stuff only) lines are prefixed with "custom/".
                see prepareFiles target that uses the same but expects a broader pattern 
                if you want ignored files to be stripped out import AND copy actions.
                -->
                <excludesfile name="${target}.ignorefiles.properties" if="ignorefiles.is.found"/>

                <!-- A.DUNFEE = - CUSTOM EXCLUDE FOR UNIT TEST OBJECTS -->
                <exclude name="custom/**/Args/**"/>
                <exclude name="custom/**/*Args*"/>
            </fileset>
        </build-init>
        <if>
            <not>
                <resourceexists>
                    <file file="${build.iiqBinaryExtract}/WEB-INF/config/init-default_org.xml"/>
                </resourceexists>
            </not>
            <then>
                <move file="${build.iiqBinaryExtract}/WEB-INF/config/init.xml"
                      tofile="${build.iiqBinaryExtract}/WEB-INF/config/init-default_org.xml" failonerror="true"/>
            </then>
        </if>

        <condition property="importLCM">
            <equals arg1="${usingLcm}" arg2="true"/>
        </condition>
        <condition property="importRS">
            <equals arg1="${usingRapidSetup}" arg2="true"/>
        </condition>
        <condition property="importAP">
            <equals arg1="${deployAcceleratorPack}" arg2="true"/>
        </condition>
        <condition property="importPAM">
            <equals arg1="${usingPAM}" arg2="true"/>
        </condition>
        <condition property="importFAM">
            <equals arg1="${usingFAM}" arg2="true"/>
        </condition>
        <condition property="importCAM">
            <equals arg1="${usingCAM}" arg2="true"/>
        </condition>
        <condition property="importAI">
            <equals arg1="${usingAI}" arg2="true"/>
        </condition>
    	
        <build-init initFile="${build.iiqBinaryExtract}/WEB-INF/config/init.xml">
            <fileset dir="${build.iiqBinaryExtract}/WEB-INF/config">
                <include name="init-default_org.xml"/>
            </fileset>
            <fileset dir="${build.iiqBinaryExtract}/WEB-INF/config">
                <include name="init-lcm.xml" if="importLCM"/>
            </fileset>
            <fileset dir="${build.iiqBinaryExtract}/WEB-INF/config">
                <include name="init-rapidsetup.xml" if="importRS"/>
                <include name="init-pam.xml" if="importPAM"/>
                <include name="init-fam.xml" if="importFAM"/>
                <include name="init-cam.xml" if="importCAM"/>
                <include name="init-ai.xml" if="importAI"/>
            </fileset>
            <fileset dir="${build.iiqBinaryExtract}/WEB-INF/config">
                <include name="patch/*.xml"/>
                <exclude name="**/*.hbm.xml"/>
            </fileset>
            <fileset dir="${build.iiqBinaryExtract}/WEB-INF/config">
                <include name="init-acceleratorpack.xml" if="importAP"/>
            </fileset>
            <fileset dir="${build.iiqBinaryExtract}/WEB-INF/config">
                <include name="sp.init-custom.xml"/>
            </fileset>         
        </build-init>    	
    	
        <!-- generate init file for subset build -->
        <if>
            <and>
                <equals arg1="${buildSubset}" arg2="true"/>
                <available file="${target}.includefiles.properties"/>
                <available file="${build.iiqSubsetExtract}/WEB-INF/config" type="dir"/>
            </and>
            <then>
            	<echo message="Building init file subset"/>
                <build-init initFile="${build.iiqSubsetExtract}/WEB-INF/config/sp.init-custom.xml">
                    <fileset dir="${build.iiqSubsetExtract}/WEB-INF/config">
                        <include name="custom/**/*.xml"/>
                        <include name="custom/**/*.XML"/>
                        <include name="custom/**/*.jrxml"/>
                        <exclude name="custom/**/*-init.xml"/>
                    </fileset>
                </build-init>
                <if>
                    <resourcecontains resource="${target}.target.properties" substring="="/>
                    <then>
                        <replace dir="${build.iiqSubsetExtract}" replacefilterfile="${target}.target.properties"
                                 includes="**/*.xml, **/*.XML" encoding="UTF-8"/>
                    </then>
                </if>
                <if>
                    <resourcecontains resource="${target}.target.secret.properties" substring="="/>
                    <then>
                        <replace dir="${build.iiqSubsetExtract}" replacefilterfile="${target}.target.secret.properties"
                                 includes="**/*.xml, **/*.XML" encoding="UTF-8"/>
                    </then>
                </if>
            </then>
        </if>
    </target>


    <target name="prepareCustomConfig" depends="prepareFiles,build-inits">
        <replaceregexp file="${build.iiqBinaryExtract}/WEB-INF/config/sp.init-custom.xml" match="\\" replace="/"
                       flags="g"/>
        <replaceregexp file="${build.iiqBinaryExtract}/WEB-INF/config/init.xml" match="\\" replace="/" flags="g"/>
    </target>

    <target name="prepareFiles" depends="setExclusions">
        <delete dir="${build.customXMLDir}"/>

        <copy todir="${build.customXMLDir}">
            <fileset dir="config">
                <!-- if you have XML that is a template for automatic configuration generation then please use the
                following name convention-->
                <exclude name="**/*Template.xml"/>
                <!-- Do not move over the anything in any Samples folder into the build dir -->
                <exclude name="**/Samples/**"/>
                <!-- Exclude individual components -->
                <exclude name="${ssf.features.excludepattern}"/>
                <exclude name="${ssf.frameworks.excludepattern}"/>
                <exclude name="${sst.unittester.excludepattern}"/>
                <exclude name="${genericimporter.excludepattern}"/>
                <exclude name="${reportextractor.excludepattern}"/>
                <exclude name="${ssptools.excludepattern}"/>
                <exclude name="${correlationMigrator.excludepattern}"/>
            	<exclude name="${certificationCloser.excludepattern}"/>
                <exclude name="${workgroupMigrator.excludepattern}"/>
                <exclude name="${emailTemplateEditor.excludepattern}"/>
                <exclude name="${enhancedEmailNotifier.excludepattern}"/>
                <exclude name="${passwordExpirationReminder.excludepattern}"/>
                <exclude name="${mockIntegrationExecutor.excludepattern}"/>
                <exclude name="${pluginImporter.excludepattern}"/>
                <exclude name="**/.keep"/>
                <!--
                Exclude items named in this target's excludes file.
                Each line in the file is treated as an exclusion pattern.
                For this use here, we can't have the lines prefixed with "custom/".
                -->
                <excludesfile name="${target}.ignorefiles.properties" if="ignorefiles.is.found"/>
            </fileset>
        </copy>
        <if>
            <resourcecontains resource="${target}.target.properties" substring="="/>
            <then>
                <replace dir="${build.customXMLDir}" replacefilterfile="${target}.target.properties"
                         includes="**/*.xml, **/*.XML" encoding="UTF-8"/>
            </then>
        </if>

        <!-- Optionally, more confidential tokens can be stored in a target.secret.properties file and this can be removed from version control -->
        <if>
            <resourcecontains resource="${target}.target.secret.properties" substring="="/>
            <then>
                <replace dir="${build.customXMLDir}" replacefilterfile="${target}.target.secret.properties"
                         includes="**/*.xml, **/*.XML" encoding="UTF-8"/>
            </then>
        </if>

        <!-- use a custom iiq properties file for a target -->
        <copy file="${target}.iiq.properties" tofile="${build.iiqBinaryExtract}/WEB-INF/classes/iiq.properties"
              failonerror="false" overwrite="true"/>

        <!-- use a custom log4j properties file for a target -->
        <if>
            <available file="${target}.log4j.properties"/>
            <then>
                <echo message="Copying ${target}.log4j.properties to ${build.iiqBinaryExtract}/WEB-INF/classes/log4j.properties"/>
                <copy file="${target}.log4j.properties"
                      tofile="${build.iiqBinaryExtract}/WEB-INF/classes/log4j.properties"
                      failonerror="false" overwrite="true"/>
            </then>
        </if>
        <if>
            <available file="${target}.log4j2.properties"/>
            <then>
                <echo message="Copying ${target}.log4j2.properties to ${build.iiqBinaryExtract}/WEB-INF/classes/log4j2.properties"/>
                <copy file="${target}.log4j2.properties"
                      tofile="${build.iiqBinaryExtract}/WEB-INF/classes/log4j2.properties"
                      failonerror="false" overwrite="true"/>
            </then>
        </if>

        <!-- add keystore files for a target -->
        <if>
            <and>
                <available file="${target}.iiq.dat"/>
                <available file="${target}.iiq.cfg"/>
            </and>
            <then>
                <echo message="Copying ${target}.iiq.dat and  ${target}.iiq.cfg files to ${build.iiqBinaryExtract}/WEB-INF/classes/"/>
                <copy file="${target}.iiq.dat" tofile="${build.iiqBinaryExtract}/WEB-INF/classes/iiq.dat"
                      failonerror="false" overwrite="true"/>
                <copy file="${target}.iiq.cfg" tofile="${build.iiqBinaryExtract}/WEB-INF/classes/iiq.cfg"
                      failonerror="false" overwrite="true"/>
            </then>
        </if>

        <!-- prepare the subset xml files by copying the files from includefiles.properties -->
        <if>
            <and>
                <equals arg1="${buildSubset}" arg2="true"/>
                <available file="${target}.includefiles.properties"/>
            </and>
            <then>
                <delete dir="${build.subsetXMLDir}"/>
                <mkdir dir="${build.subsetXMLDir}"/>
                <copy todir="${build.subsetXMLDir}">
                    <fileset dir="config">
                        <includesfile name="${target}.includefiles.properties"/>
                    </fileset>
                </copy>
            </then>
        </if>

    </target>

    <!-- ********************************************************** -->
    <!-- Target: strip-ids                                          -->
    <!-- Strip out id modified and created tags from custom xml     -->
    <!-- ********************************************************** -->
    <target name="-strip-ids">
        <echo message="Removing hibernate object attributes from xml files"/>
        <replaceregexp flags="g">
            <regexp pattern="\s(id|created|modified)=[&quot;']\w+[&quot;']"/>
            <substitution expression=""/>
            <fileset dir="${build.customXMLDir}">
                <include name="**/*.xml"/>
                <!--<exclude name="**/${init-file}" />-->
            </fileset>
        </replaceregexp>
    </target>

    <!-- ********************************************************** -->
    <!-- Target: validate                                           -->
    <!-- Validate custom XML files                                  -->
    <!-- ********************************************************** -->
    <target name="validate" depends="-strip-ids">
        <echo message="Validating Custom XML objects"/>
        <echo message="${build.customXMLDir}"/>
        <xmlvalidate>
            <!--
             <fileset dir="${build.customXMLDir}" includes="**/*.xml" />
            -->
            <fileset dir="${build.customXMLDir}">
                <include name="**/*.xml"/>

                <!-- A.DUNFEE = - CUSTOM EXCLUDE FOR UNIT TEST OBJECTS -->
                <exclude name="**/Args/**"/>
                <exclude name="**/*Args*"/>

            </fileset>
            <xmlcatalog>
                <dtd publicId="sailpoint.dtd" location="${dtd}"/>
            </xmlcatalog>
        </xmlvalidate>
    </target>

    <!--                                                            -->
    <!-- Target: validatetokens                                     -->
    <!-- Validate all xml files for missed tokens                   -->
    <!--                                                            -->
    <target name="validatetokens">
        <echo message="Validating XML files for missed tokens..."/>
        <!-- Delete already existing lock file -->
        <delete file=".lock"/>
        <!-- Executing the Validations class -->
        <java classname="sailpoint.services.tools.ant.Validations" fork="false">
            <arg line="'${user.dir}'"/>
            <arg line="${target}.target.properties"/>
            <classpath>
                <pathelement location="lib/services-tools.jar"/>
            </classpath>
        </java>
        <fail message="XML file validation failed - one or more tokens are missing...">
            <condition>
                <resourcecount count="1">
                    <fileset id="lock" dir="." includes=".lock"/>
                </resourcecount>
            </condition>
        </fail>
    </target>

    <target name="setExclusions">
        <!-- Set properties for file paths to exclude depending on -->
        <!-- deployment options set in build.properties            -->
        <if>
            <not>
                <equals arg1="${deploySSF}" arg2="true"/>
            </not>
            <then>
                <property name="ssf.features.excludepattern" value="SSF_Features/**"/>
                <property name="ssf.frameworks.excludepattern" value="SSF_Frameworks/**"/>
            </then>
        </if>
        <if>
            <not>
                <equals arg1="${deploySSTUnitTester}" arg2="true"/>
            </not>
            <then>
                <property name="sst.unittester.excludepattern" value="SSF_Tools/SST_UnitTester/**"/>
            </then>
        </if>
        <if>
            <or>
                <equals arg1="${pre6.3}" arg2="true"/>
                <not>
                    <equals arg1="${deployGenericImporter}" arg2="true"/>
                </not>
            </or>
            <then>
                <property name="genericimporter.excludepattern" value="SSF_Tools/GenericImporter/**"/>
            </then>
        </if>
        <if>
            <not>
                <equals arg1="${deployReportExtractor}" arg2="true"/>
            </not>
            <then>
                <property name="reportextractor.excludepattern" value="SSF_Tools/ReportExtractor/**"/>
            </then>
        </if>
        <if>
            <not>
                <equals arg1="${deploySSPTools}" arg2="true"/>
            </not>
            <then>
                <property name="ssptools.excludepattern" value="SSP_Tools/**"/>
            </then>
        </if>
        <if>
            <not>
                <equals arg1="${deployCertificationCloser}" arg2="true"/>
            </not>
            <then>
                <property name="certificationCloser.excludepattern" value="SSF_Tools/CertificationCloser/**"/>
            </then>
        </if>
        <if>
            <not>
                <equals arg1="${deployCorrelationMigrator}" arg2="true"/>
            </not>
            <then>
                <property name="correlationMigrator.excludepattern" value="SSF_Tools/CorrelationMigrator/**"/>
            </then>
        </if>
        <if>
            <not>
                <equals arg1="${deployWorkgroupMigrator}" arg2="true"/>
            </not>
            <then>
                <property name="workgroupMigrator.excludepattern" value="SSF_Tools/WorkgroupMigrator/**"/>
            </then>
        </if>
        <if>
            <not>
                <equals arg1="${deployEmailTemplateEditor}" arg2="true"/>
            </not>
            <then>
                <property name="emailTemplateEditor.excludepattern" value="SSF_Tools/EmailTemplateEditor/**"/>
            </then>
        </if>
        <if>
            <not>
                <equals arg1="${deployEnhancedEmailNotifier}" arg2="true"/>
            </not>
            <then>
                <property name="enhancedEmailNotifier.excludepattern" value="SSF_Tools/EnhancedEmailNotifier/**"/>
            </then>
        </if>
        <if>
            <or>
                <equals arg1="${pre6.4}" arg2="true"/>
                <not>
                    <equals arg1="${deployMockIntegrationExecutor}" arg2="true"/>
                </not>
            </or>
            <then>
                <property name="mockIntegrationExecutor.excludepattern" value="SSF_Tools/MockIntegrationExecutor/**"/>
            </then>
        </if>
        <if>
            <not>
                <equals arg1="${deployPasswordExpirationReminder}" arg2="true"/>
            </not>
            <then>
                <property name="passwordExpirationReminder.excludepattern"
                          value="SSF_Tools/PasswordExpirationReminder/**"/>
            </then>
        </if>
        <if>
            <or>
                <equals arg1="${pre7.1}" arg2="true"/>
                <not>
                    <equals arg1="${deployPluginImporter}" arg2="true"/>
                </not>
            </or>
            <then>
                <property name="pluginImporter.excludepattern" value="ServiceDefinition/SSB_PluginImporterService.xml"/>
            </then>
        </if>
    </target>

    <!--
        we check for build.properties console_user and console_pass.
        then they are injected so we can use them for import commands.
     -->
    <target name="-security.Init" depends="init-properties">
        <!-- check if either property is null/missing -->
        <condition property="empty.Principal">
            <or>
                <not>
                    <isset property="console_user"/>
                </not>
                <equals arg1="${console_user}" arg2=""/>
            </or>
        </condition>

        <condition property="empty.Password">
            <or>
                <not>
                    <isset property="console_pass"/>
                </not>
                <equals arg1="${console_pass}" arg2=""/>
            </or>
        </condition>

        <if>
            <or>
                <isset property="empty.Principal"/>
                <isset property="empty.Password"/>
            </or>
            <then>
                <echo>Either console_user or console_pass missing in build properties (or both)</echo>
                <!-- we blank out console_user property so the ReadFromConsole class kicks off a fresh ask for credentials -->
                <condition property="console_user" value="">
                    <not>
                        <isset property="console_user"/>
                    </not>
                </condition>

                <!-- note the actual message for input may be changed with the ReadFromConsole class -->
                <input message="Please enter password for ${console_user} [secure]:" addproperty="credentials_from_form"
                       defaultvalue="${console_user}">
                    <handler classname="sailpoint.services.tools.ant.ReadFromConsole">
                        <classpath>
                            <pathelement location="lib/services-tools.jar"/>
                        </classpath>
                    </handler>
                </input>

                <script language="javascript">
                    <![CDATA[
                    credentials_from_form = project.getProperty("credentials_from_form");
                    var res = credentials_from_form.split("\n"); 
                    project.setProperty("console_user",res[0]);
                    project.setProperty("console_pass",res[1]);
                ]]>
                </script>

                <!-- just in case you want to print out credentials for debugging -->
                <!-- <echo message="console_user:[${console_user}] console_pass:${console_pass}"/> -->
            </then>
            <else>
                <echo>Both console_user and console_pass detected</echo>
                <!-- <echo message="console_user:${console_user} console_pass:${console_pass}"/>-->
            </else>
        </if>
    </target>

</project>