<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule name="SP Rehire Rules Library" language="beanshell">
	<ReferencedRules>
	    <Reference class="sailpoint.object.Rule" name="SP Provisioning Rules Library"/>
	    <Reference class="sailpoint.object.Rule" name="SP Role Assigment Rule Library"/>
	    <Reference class="sailpoint.object.Rule" name="SP Attr Synch Rules Library"/>
    </ReferencedRules>
	<Source>
	<![CDATA[
	import sailpoint.api.SailPointFactory;
	import sailpoint.api.SailPointContext;
	import sailpoint.api.Provisioner;
	import sailpoint.object.*;
	import sailpoint.object.ProvisioningPlan.AttributeRequest;
	import sailpoint.object.ProvisioningPlan.AccountRequest;
    import sailpoint.object.ProvisioningPlan.Operation; 
	import sailpoint.tools.Util;
    import sailpoint.tools.Message;
    import sailpoint.tools.GeneralException;
    import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.sql.DriverManager;
    import java.sql.Timestamp;
	import java.util.*;
	import java.text.*;
	import javax.naming.Context;
	import javax.naming.InitialContext;
	import javax.sql.DataSource;
	import sailpoint.api.PasswordGenerator;
	import sailpoint.api.Matchmaker;
	import sailpoint.api.IdentityService;
	
	
    import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory;

	private static Log rlogger = LogFactory.getLog("rule.SP.Rehire.RulesLibrary");
	
	public static boolean isTriggerRehireRule(SailPointContext context, Identity previousIdentity, Identity newIdentity){
		rlogger.trace("Enter isTriggerRehireRule");
		boolean flag = false;
		
		String currStatus = "";

        if(newIdentity == null || newIdentity == void){
        	rlogger.warn("New identity objects are null");
        	return flag;
        }
        
        if(previousIdentity == null || previousIdentity == void){
        	rlogger.warn("Prev identity objects are null");
        	return flag;
        }
        
        String identityName = newIdentity.getName();
        
        Custom mappingObj = getRehireMappingObject(context);
		
		if (mappingObj != null){
		
			String triggerType = mappingObj.get("Trigger Type");
			
			rlogger.debug("Have the trigger type: " + triggerType);
			if ("Custom Rule".equalsIgnoreCase(triggerType)){
				rlogger.trace("Call isRehireCustomTriggerRule");
				
				flag = isRehireCustomTriggerRule(context, previousIdentity, newIdentity);
			} else if("Selector".equalsIgnoreCase(triggerType)){
				rlogger.trace("Determine if trigger using a selector");
				Matchmaker matchMaker = new Matchmaker(context);
				IdentitySelector idSelector = mappingObj.get("Trigger Field Selector");
				
				flag = matchMaker.isMatch(idSelector, newIdentity);
			} else if("Compare Links".equalsIgnoreCase(triggerType)){
				rlogger.trace("Determine if trigger by comparing links");
				
				flag = isNewLinkChanged(previousIdentity, newIdentity, mappingObj);
			} else {
				rlogger.warn("Unknown trigger type: " + triggerType);
				
			}
		}
		
		rlogger.trace("Exit isTriggerRehireRule: " + flag);
		return flag;
	}
	
	public boolean isNewLinkChanged(Identity previousIdentity, Identity newIdentity, Custom mappingObj){
		rlogger.trace("Enter isNewLinkChanged");
		boolean flag = false;
	
		List checkLinks = mappingObj.get("Trigger Compare Links");
		Attributes linkSchemas = mappingObj.get("Trigger Compare Links Schemas");
		IdentityService is = new IdentityService(context);
		Application app;
		
		rlogger.trace("Have link names to check: " + checkLinks);
		
		if (checkLinks == null || checkLinks.isEmpty()){
			rlogger.warn("No links to check");
			return false;
		}
		
		rlogger.trace("Loop the link names");
		for (String checkLink : checkLinks){
			rlogger.trace("Checking link: " + checkLink);
			
			app = context.getObjectByName(Application.class, checkLink);
			
			List prevLinks = is.getLinks(previousIdentity, app);
			List newLinks = is.getLinks(newIdentity, app);
			
			rlogger.trace("Check if either list is empty: " + prevLinks + ", " + newLinks);
			
			if (prevLinks == null || prevLinks.isEmpty() || newLinks == null || newLinks.isEmpty()){
				rlogger.warn("One of the lists is empty");
				continue;
			}
			
			rlogger.trace("Making rather big assumption here that there's only only instance of an account that would be checked in this manner.");
			Link prevLink = prevLinks.get(0);
			Link newLink = newLinks.get(0);
		
			List linkAttrs = linkSchemas.get(checkLink);
			
			rlogger.trace("Have list of attrs to check: " + linkAttrs);
			
			if (linkAttrs == null || linkAttrs.isEmpty()){
				rlogger.warn("No attr names to compare");
				continue;
			}
			
			rlogger.trace("Loop the schema attrs");
			for (String attrName : linkAttrs){
				rlogger.trace("Comparing the old and new value of: " + attrName);
				
				Object prevVal = prevLink.getAttribute(attrName);
				Object newVal = newLink.getAttribute(attrName);
				
				rlogger.trace("Check if prev and new val are differnt");
				flag = isFieldValueUpdated(prevVal, newVal);
				
				rlogger.trace("Check flag val: " + flag);
				if (flag){
					rlogger.debug("Old and new value are different for: " + attrName);
					break;
				}
			}
			
		}
	
	
		rlogger.trace("Exit isNewLinkChanged: " + flag);
		return flag;
	}
	
	
	public ProvisioningPlan getDynamicRehirePlan(SailPointContext context, String identityName, Workflow workflow){
		rlogger.trace("Enter getDynamicRehirePlan");
		
		Identity identity = context.getObjectByName(Identity.class, identityName);
		
		ProvisioningPlan plan = getDynamicRehirePlan (context, identity, workflow);
		
		return plan;
	}
	
	public ProvisioningPlan getDynamicRehirePlan(SailPointContext context, Identity identity, Workflow workflow){
		rlogger.trace("Enter getDynamicRehirePlan");
		
		ProvisioningPlan plan = new ProvisioningPlan();
		
		Custom mappingObj = getRehireMappingObject(context);
		
		if (mappingObj != null){
			rlogger.trace("Get the con types");
			List conTypes = mappingObj.get("Plan Construction Types");
			
			boolean enableAccounts = false;
			List enAcctsList = new ArrayList();
			List links = identity.getLinks();
			List addedEnables = new ArrayList();
			
			if (conTypes.contains("Enable Accounts")){
				rlogger.debug("Enable Accounts is true");
				enableAccounts = true;
				enAcctsList = mappingObj.get("Enable Accounts Applications");
			}
			
			if (conTypes.contains("Dynamic Roles")){
				rlogger.debug("Process Dynamic Roles for Rehire");
				plan = getDynamicRolesPlan(context, identity);
			}
			
			if (conTypes.contains("Attribute Synch")){
				rlogger.debug("Process Attribute Synch for Rehire");

				rlogger.trace("Get the AttributeSynch mapping object");
				Custom attrSyncMappingObj = getAttrSynchMappingObject(context);
        
				List asExcludeApps = new ArrayList();
				String asPlanConstructionType;
		
				if (attrSyncMappingObj != null){
					rlogger.trace("Get excluded applications");
					asExcludeApps = attrSyncMappingObj.get("Excluded Applications");
					asPlanConstructionType = attrSyncMappingObj.get("Plan Construction Type");
				}
			
				rlogger.trace("Have excluded apps: " + asExcludeApps);
				
				
				for (Link link : links){
					AccountRequest.Operation acctOp = AccountRequest.Operation.Modify;
					app = link.getApplication();
					appName = app.getName();
					nativeId = link.getNativeIdentity();
					instance = link.getInstance();
					
					rlogger.trace("Check if app is excluded: " + appName);
					if ("Dynamic Targets".equals(asPlanConstructionType) && null != asExcludeApps && asExcludeApps.contains(appName)){
						rlogger.debug(appName + " App is excluded.  Skip.");
						continue;
					}
					
					rlogger.debug("Check if also enable accounts");
					if (enableAccounts && enAcctsList.contains(appName)){
						acctOp = AccountRequest.Operation.Enable;
					}
					
					rlogger.debug("Get attr requests for " + nativeId + ":" + instance + " on " + appName);
					List attrReqs = getUpdateAttributeRequests(context, identity, link);
					
					rlogger.trace("Have attrReqs: " + attrReqs);
					if (attrReqs != null && !attrReqs.isEmpty()){
						
						rlogger.debug("Attr reqs not null.  Build account request");
						
						AccountRequest acctReq = new AccountRequest(acctOp, appName, instance, nativeId);
						acctReq.addAll(attrReqs);
						
						String ae = appName + "-" + instance + "-" + nativeId;
						addedEnables.add(ae);
						
						rlogger.debug("Add account request: " + acctReq.toXml());
						plan.add(acctReq);
						
					}
				}
			}
			
			if (conTypes.contains("Enable Accounts")){
				rlogger.trace("Process Enable Accounts for Rehire");
				AccountRequest.Operation acctOp = AccountRequest.Operation.Enable;
				
				for (Link link : links){
					app = link.getApplication();
					appName = app.getName();
					nativeId = link.getNativeIdentity();
					instance = link.getInstance();
					
					String ae = appName + "-" + instance + "-" + nativeId;
					
					if (!addedEnables.contains(ae) && enAcctsList.contains(appName)){
						AccountRequest acctReq = new AccountRequest(acctOp, appName, instance, nativeId);
						rlogger.debug("Add account request: " + acctReq.toXml());
						plan.add(acctReq);
					}
				}
			}
			
			if (conTypes.contains("Custom Rule")){
				rlogger.trace("Call buildCustomRehirePlan");
				
				workflow.put("plan", plan);
				plan = buildCustomRehirePlan(context, workflow);
			} 
		}
		
		plan.setComments("Adding Rehire Access");
		
		rlogger.trace("Set plan identity " + identity);
		plan.setIdentity(identity);
		
		rlogger.trace("Exit getDynamicRehirePlan: " + plan.toXml());
		return plan;
	}
	
	public static Custom getRehireMappingObject(SailPointContext context){
		rlogger.trace("Enter getRehireMappingObject");
		
		Custom mappingObj = context.getObjectByName(Custom.class, "SPCONF Rehire Mappings Custom");
		rlogger.trace("Exit getRehireMappingObject: " + mappingObj);
		return mappingObj;
	}
	
	]]>
	</Source>
</Rule>