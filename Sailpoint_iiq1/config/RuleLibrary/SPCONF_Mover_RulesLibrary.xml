<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule name="SPCONF Mover Rules Library" language="beanshell">
	<ReferencedRules>
	    <Reference class="sailpoint.object.Rule" name="SP Provisioning Rules Library"/>
	    <Reference class="sailpoint.object.Rule" name="SP Role Assigment Rule Library"/>
	    <Reference class="sailpoint.object.Rule" name="SP Attr Synch Rules Library"/>
    </ReferencedRules>
	<Source>
	<![CDATA[
	import sailpoint.api.SailPointFactory;
	import sailpoint.api.SailPointContext;
	import sailpoint.api.Provisioner;
	import sailpoint.object.*;
	import sailpoint.object.ProvisioningPlan.AttributeRequest;
	import sailpoint.object.ProvisioningPlan.AccountRequest;
    import sailpoint.object.ProvisioningPlan.Operation; 
	import sailpoint.tools.Util;
    import sailpoint.tools.Message;
    import sailpoint.tools.GeneralException;
    import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.sql.DriverManager;
    import java.sql.Timestamp;
	import java.util.*;
	import java.text.*;
	import javax.naming.Context;
	import javax.naming.InitialContext;
	import javax.sql.DataSource;
	import sailpoint.api.PasswordGenerator;
	
	
    import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory;

	private static Log mlogger = LogFactory.getLog("rule.SP.Mover.RulesLibrary");
	
	/******************************************************************************
		TODO:  FILL IN FOLLOWING MOVER METHODS
	******************************************************************************/
	/*
		In all rules that receive the workflow param, any workflow variable is accessible by doing workflow.get, such as:
		
			String identityName = workflow.get("identityName");
	*/
	
	public static boolean isMoverCustomTriggerRule(SailPointContext context, Identity previousIdentity, Identity newIdentity){
		boolean flag = false;
		
		return flag;
	}
	
	public static ProvisioningPlan buildCustomMoverPlan(SailPointContext context, Workflow workflow){
		//  append to the plan
		ProvisioningPlan plan = workflow.get("plan");
		if (plan == null){
			plan = new ProvisioningPlan();
		}
		
		// add logic to buid out rest of plan
		return plan;
	}
	
	/* Return the request Type */
	public static String getMoverRequestTypeRule(SailPointContext context, Workflow workflow){
		String requestType = "Mover";
		
		return requestType;
	}
	
	/* Return prov success email */
	public static String getMoverProvSuccessEmailTemplateRule(SailPointContext context, Workflow workflow){
		String val = "Mover Success Email Template";
		
		return val;
	}
	
	/* Return prov failure email */
	public static String getMoverProvFailureEmailTemplateRule(SailPointContext context, Workflow workflow){
		String val = "Mover Failure Email Template";
		
		return val;
	}
	
	/* Return approved email */
	public static String getMoverApprovedEmailTemplateRule(SailPointContext context, Workflow workflow){
		String val = "Mover Approved Email Template";
		
		return val;
	}
	
	/* Return rejected email */
	public static String getMoverRejectedEmailTemplateRule(SailPointContext context, Workflow workflow){
		String val = "Mover Rejected Email Template";
		
		return val;
	}
	
	/* Return prov success email to */
	public static String getMoverProvSuccessEmailToRule(SailPointContext context, Workflow workflow){
		Identity identity = context.getObjectByName(Identity.class, workflow.get("identityName"));
		String val = identity.getEmail();
		
		context.decache(identity);
		identity = null;
		
		return val;
	}
	
	/* Return prov failure email to */
	public static String getMoverProvFailureEmailToRule(SailPointContext context, Workflow workflow){
		Identity identity = context.getObjectByName(Identity.class, workflow.get("identityName"));
		String val = identity.getEmail();
		
		context.decache(identity);
		identity = null;
		
		return val;
	}
	
	/* Return approved email to */
	public static String getMoverApprovedEmailToRule(SailPointContext context, Workflow workflow){
		Identity identity = context.getObjectByName(Identity.class, workflow.get("identityName"));
		String val = identity.getEmail();
		
		context.decache(identity);
		identity = null;
		
		return val;
	}
	
	/* Return rejected email to */
	public static String getMoverRejectedEmailToRule(SailPointContext context, Workflow workflow){
		String val = "somedefaultaddress@sailpoint.com";
		
		return val;
	}
	
	/* Do any updates to workflow variables before ProvisioningPlan is compiled */
	public static void moverBeforePlanRule(SailPointContext context, Workflow workflow){
		mlogger.trace("Enter Mover beforePlanRule");
		
		mlogger.trace("Getting extension attributes that can be used for customizations");
		Attributes identityModel = initWorkflowAttributesVar(workflow, "identityModel");
		Attributes spExtAttrs = initWorkflowAttributesVar(workflow, "spExtAttrs");
		
		//TODO:  CAN PUT LOGIC HERE TO INITIALIZE VALUES
		
		workflow.put("identityModel", identityModel);
		workflow.put("spExtAttrs", spExtAttrs);
		
		mlogger.trace("Exit Mover beforePlanRule");
	}
	
	/* Do any updates to workflow variables before ProvisioningProject is provisioned */
	public static void moverBeforeProvisionRule(SailPointContext context, Workflow workflow){
		mlogger.trace("Enter Mover beforeProvisionRule");
		
		mlogger.trace("Exit Mover beforeProvisionRule");
	}
	
	/* Do any updates to workflow variables after ProvisioningProject is provisioned */
	public static void moverAfterProvisionRule(SailPointContext context, Workflow workflow){
		mlogger.trace("Enter Mover afterProvisionRule");
		
		mlogger.trace("Exit Mover afterProvisionRule");
	}
	
	/* Do any updates to workflow variables if there was no request to process */
	public static void moverNoRequestRule(SailPointContext context, Workflow workflow){
		
	}

	]]>
	</Source>
</Rule>