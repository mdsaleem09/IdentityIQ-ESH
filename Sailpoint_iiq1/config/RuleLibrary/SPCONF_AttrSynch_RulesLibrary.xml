<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule name="SPCONF Attr Synch Rules Library" language="beanshell">
	<ReferencedRules>
	    <Reference class="sailpoint.object.Rule" name="SP Provisioning Rules Library"/>
	    <Reference class="sailpoint.object.Rule" name="SP Role Assigment Rule Library"/>
    </ReferencedRules>
	<Source>
	<![CDATA[
	import sailpoint.api.SailPointFactory;
	import sailpoint.api.SailPointContext;
	import sailpoint.api.Provisioner;
	import sailpoint.object.*;
	import sailpoint.object.ProvisioningPlan.AttributeRequest;
	import sailpoint.object.ProvisioningPlan.AccountRequest;
    import sailpoint.object.ProvisioningPlan.Operation; 
	import sailpoint.tools.Util;
    import sailpoint.tools.Message;
    import sailpoint.tools.GeneralException;
    import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.sql.DriverManager;
    import java.sql.Timestamp;
	import java.util.*;
	import java.text.*;
	import javax.naming.Context;
	import javax.naming.InitialContext;
	import javax.sql.DataSource;
	import sailpoint.api.PasswordGenerator;
	
	
    import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory;

	private static Log aslogger = LogFactory.getLog("rule.SP.AttrSynch.RulesLibrary");
	
	/******************************************************************************
		TODO:  FILL IN FOLLOWING AttrSynch METHODS
	******************************************************************************/
	/*
		In all rules that receive the workflow param, any workflow variable is accessible by doing workflow.get, such as:
		
			String identityName = workflow.get("identityName");
	*/

	public static boolean isAttrSynchCustomTriggerRule(SailPointContext context, Identity previousIdentity, Identity newIdentity){
		aslogger.trace("Enter isAttrSynchCustomTriggerRule");
		boolean flag = false;
		
		aslogger.trace("Exit isAttrSynchCustomTriggerRule: " + flag);
		return flag;
	}
	
	public static ProvisioningPlan buildCustomAttrSynchPlan(SailPointContext context, Workflow workflow){
		aslogger.trace("Enter buildCustomAttrSynchPlan");
	
		ProvisioningPlan plan = workflow.get("plan");
		if (plan == null){
			plan = new ProvisioningPlan();
		}
		
		aslogger.trace("Exit buildCustomAttrSynchPlan: " + plan.toXml());
		return plan;
	}
	
	/* Return the request Type */
	public static String getAttrSynchRequestTypeRule(SailPointContext context, Workflow workflow){
		aslogger.trace("Enter getAttrSynchRequestTypeRule");
		String requestType = "AttrSynch";
		
		aslogger.trace("Exit getAttrSynchRequestTypeRule: " + requestType);
		return requestType;
	}
	
	/* Return prov success email */
	public static String getAttrSynchProvSuccessEmailTemplateRule(SailPointContext context, Workflow workflow){
		String val = "AttrSynch Success Email Template";
		
		return val;
	}
	
	/* Return prov failure email */
	public static String getAttrSynchProvFailureEmailTemplateRule(SailPointContext context, Workflow workflow){
		String val = "AttrSynch Failure Email Template";
		
		return val;
	}
	
	/* Return approved email */
	public static String getAttrSynchApprovedEmailTemplateRule(SailPointContext context, Workflow workflow){
		String val = "AttrSynch Approved Email Template";
		
		return val;
	}
	
	/* Return rejected email */
	public static String getAttrSynchRejectedEmailTemplateRule(SailPointContext context, Workflow workflow){
		String val = "AttrSynch Rejected Email Template";
		
		return val;
	}
	
	/* Return prov success email to */
	public static String getAttrSynchProvSuccessEmailToRule(SailPointContext context, Workflow workflow){
		Identity identity = context.getObjectByName(Identity.class, workflow.get("identityName"));
		String val = identity.getEmail();
		
		context.decache(identity);
		identity = null;
		
		return val;
	}
	
	/* Return prov failure email to */
	public static String getAttrSynchProvFailureEmailToRule(SailPointContext context, Workflow workflow){
		Identity identity = context.getObjectByName(Identity.class, workflow.get("identityName"));
		String val = identity.getEmail();
		
		context.decache(identity);
		identity = null;
		
		return val;
	}
	
	/* Return approved email to */
	public static String getAttrSynchApprovedEmailToRule(SailPointContext context, Workflow workflow){
		Identity identity = context.getObjectByName(Identity.class, workflow.get("identityName"));
		String val = identity.getEmail();
		
		context.decache(identity);
		identity = null;
		
		return val;
	}
	
	/* Return rejected email to */
	public static String getAttrSynchRejectedEmailToRule(SailPointContext context, Workflow workflow){
		String val = "somedefaultaddress@sailpoint.com";
		
		return val;
	}
	
	/* Do any updates to workflow variables before ProvisioningPlan is compiled */
	public static void attrSynchBeforePlanRule(SailPointContext context, Workflow workflow){
		aslogger.trace("Enter attrSynchBeforePlanRule");
		aslogger.trace("Getting extension attributes that can be used for customizations");
		Attributes identityModel = initWorkflowAttributesVar(workflow, "identityModel");
		Attributes spExtAttrs = initWorkflowAttributesVar(workflow, "spExtAttrs");
		
		
		
		workflow.put("identityModel", identityModel);
		workflow.put("spExtAttrs", spExtAttrs);
		aslogger.trace("Exit attrSynchBeforePlanRule");
	}
	
	/* Do any updates to workflow variables before ProvisioningProject is provisioned */
	public static void attrSynchBeforeProvisionRule(SailPointContext context, Workflow workflow){
		aslogger.trace("Enter attrSynchBeforeProvisionRule");
		
		aslogger.trace("Exit attrSynchBeforeProvisionRule");
	}
	
	/* Do any updates to workflow variables after ProvisioningProject is provisioned */
	public static void attrSynchAfterProvisionRule(SailPointContext context, Workflow workflow){
		aslogger.trace("Enter attrSynchAfterProvisionRule");
		
		aslogger.trace("Exit attrSynchAfterProvisionRule");
	}
	
	/* Do any updates to workflow variables if there was no request to process */
	public static void attrSynchNoRequestRule(SailPointContext context, Workflow workflow){
		aslogger.trace("Enter  attrSynchNoRequestRule");
		
		aslogger.trace("Exit  attrSynchNoRequestRule");
	}

	]]>
	</Source>
</Rule>