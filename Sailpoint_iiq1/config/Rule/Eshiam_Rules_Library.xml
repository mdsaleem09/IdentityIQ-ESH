<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Eshiam Rules Library">
  <Source>
   import sailpoint.object.Application;
   import sailpoint.api.SailPointContext;
   import org.apache.commons.logging.Log;
   import org.apache.commons.logging.LogFactory;
   import sailpoint.object.Filter;
   import sailpoint.object.Link;
   import sailpoint.workflow.WorkflowContext;
   import sailpoint.object.Workflow;
   import java.util.ArrayList;
   import java.util.List;
   import java.util.Arrays;
   import java.util.Map;
   import java.util.HashMap;
   import sailpoint.object.Identity;
   import sailpoint.object.ManagedAttribute;
   import sailpoint.api.Provisioner; 
   import sailpoint.tools.GeneralException;
   import sailpoint.tools.Util;
   import sailpoint.object.Custom;
   import sailpoint.api.IdentityService;
   import sailpoint.object.*;
   import sailpoint.object.ProvisioningPlan.AccountRequest;
   import sailpoint.object.ProvisioningPlan.AttributeRequest;
   import sailpoint.object.ProvisioningPlan.Operation;
  
     public boolean validateIgnioScimInputs(WorkflowContext wfcontext,SailPointContext context,Map inputMap){         
		 boolean flag = true;
		 String flow = inputMap.get("flow");
  	 if(Util.isNullOrEmpty(flow)) {	
	        wfcontext.setVariable("errstr","Invalid input: flow value provided is null or empty");
	       	flag = false;
		   } 
		else if(flow.equalsIgnoreCase("Eshiam SCIM AD Group Addition")){
            flag = validateIdentity(wfcontext,context,inputMap);
		}
       else {
         System.out.println("invalid flow variable:");
	        wfcontext.setVariable("errstr","Invalid input: flow value provided is invalid - " +  flow);
	       	flag = false;
		}
		return flag;
		}
    
		
		public boolean validateIdentity(WorkflowContext wfcontext,SailPointContext context,Map inputMap)
		{
      System.out.println("inside Validate Identity");
		boolean flag=true;
		Identity idObj=null;
		String identityName=inputMap.get("identityName");
		String nativeIdentity="";
		  Filter filter=Filter.and(Filter.eq("displayName",identityName),Filter.eq("inactive",false));
		       idObj=context.getUniqueObject(Identity.class,filter);
			  if(idObj==null)
			  {
          System.out.println("Inside idObj"+idObj);
			  			 wfcontext.setVariable("errstr","Invalid input: identity is not found");

			  flag=false;
			  }
			 
                
			  
			       /*  Application appObj=context.getObjectByName(Application.class,appName);
					 IdentityService idService=new IdentityService(context);
					 List linkObj=idService.getLinks(idObj,appObj);
          
					 if(linkObj.Util.nullSafesize()==0)
					        {
				
							     System.out.println("application is not found:");
							
										 wfcontext.setVariable("errstr","Invalid input: application is not found");
            							       flag=false;


					        } 
                  */
          
		          
        
      							return flag;

		
		}
		
		
		
		public  String addADGroupToUser(WorkflowContext wfcontext,SailPointContext context,Map inputMap){
          		String identityName=inputMap.get("identityName");
			   String ADGroupName = inputMap.get("ADGroupName");
               String nativeIdentity="";
		       Filter filter=Filter.and(Filter.eq("displayName",identityName),Filter.eq("inactive",false));
		      Identity idObj=context.getUniqueObject(Identity.class,filter);
             String applicationName = "Active Directory";
			 String value="";
			 
      if(idObj!=null)
      {
			  Application appObj=context.getObjectByName(Application.class,applicationName);
					 IdentityService idService=new IdentityService(context);
					 List linkObj=idService.getLinks(idObj,appObj);
					 if(Util.nullSafeSize(linkObj)&gt;0)
					 {
					 
			                for(Link link:linkObj)
							{
                        if(link!=null)
                        {
							nativeIdentity=link.getNativeIdentity();
                        }
							}
							
							
        if(Util.isNotNullOrEmpty(ADGroupName)) {
    	    QueryOptions query = new QueryOptions();
	        query.add(Filter.and(Filter.eq("application.name",  applicationName ),Filter.like("displayName",ADGroupName)));
	        Iterator result = context.search(ManagedAttribute.class, query);
	        
	        while (result.hasNext()){
                ManagedAttribute managedAttribute = (ManagedAttribute)result.next();
               System.out.println("ma"+managedAttribute.toXml());
               	if(managedAttribute != null &amp;&amp; managedAttribute.getAttribute("sAMAccountName").equalsIgnoreCase(ADGroupName)){
                    value = managedAttribute.getValue();
                }
				}
				}
           }  
    }
								 
					ProvisioningPlan plan=new ProvisioningPlan();
					     plan.setIdentity(idObj);
						  	AccountRequest request = new AccountRequest();
                            request.setApplication(applicationName);
						    request.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
							request.setNativeIdentity(nativeIdentity);
							request.add(new AttributeRequest("memberOf",ProvisioningPlan.Operation.Add, value));
							plan.add(request);
							System.out.println("plan value :"+plan.toXml());
           	
	  	try{
		  	Provisioner provisioner = new Provisioner(context);
		  	provisioner.execute(plan);
		  	context.saveObject(idObj);
			context.commitTransaction();
	
		  	return null;
		}
           catch(GeneralException e){
			return "Error while adding group "+e.getMessage();
		}
    }
    
    
  </Source>
</Rule>