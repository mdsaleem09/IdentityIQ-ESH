<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="OHSU-Join-Trigger" type="IdentityTrigger">
  <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.</Description>
  <Signature returnType="boolean">
    <Inputs>
      <Argument name="log" type="org.apache.commons.logging.Log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context" type="sailpoint.api.SailPointContext">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="previousIdentity">
        <Description>
          The identity before the refresh/aggregation (this will be null when an
          identity is created).
        </Description>
      </Argument>
      <Argument name="newIdentity">
        <Description>
          The identity after the refresh/aggregation (this will be null when an
          identity is deleted).
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="result">
        <Description>
          A boolean describing the result of the rule.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
  System.out.println("inside join trigger");
  return true;


/*



Trigger Logic: is person type should not be equal to Ex-Employee and eligible should be 'Y' and termination date should be in future 

*/

  import sailpoint.object.Identity;
  import sailpoint.tools.Util;
  import java.text.SimpleDateFormat;

  import org.apache.log4j.Level;
  import org.apache.log4j.Logger;

  
  
  
  boolean joinerTriggerFlg = false;

  Logger logger = Logger.getLogger("OHSU.Rule.IdentityTrigger.Leaver");
  logger.setLevel(Level.DEBUG);


  System.out.println("Inside Leaver Trigger Rule:-");

  logger.debug("Start OHSU-Rule-IdentityTrigger-Leaver");


  logger.debug("previousIdentity : "+previousIdentity);
  logger.debug("newIdentity : "+newIdentity);

  if(!(previousIdentity instanceof Identity) || !(newIdentity instanceof Identity))
{
       System.out.println("Inside leaverTriggerFlg1");
 
return joinerTriggerFlg;
}
  if(newIdentity == null || newIdentity == void || !newIdentity.isCorrelated())
     {
      System.out.println("Inside leaverTriggerFlg2");
	  return joinerTriggerFlg;
	 }
  
      System.out.println("Inside leaverTriggerFlg3");

			System.out.println("Inside leaverTriggerFlg4"+newIdentity.toXml());

           //For Oracle Checking if person type should be equal to Ex-Employee and rehire shoould not be equal to one
				 //   if(!newIdentity.getAttribute("PType").equals("Ex-Employee") || !newIdentity.getAttribute("rehire").equals("1")){
          if(newIdentity.getAttribute("pType")!=null &amp;&amp; !newIdentity.getAttribute("pType").equals("Ex-Employee")){
              System.out.println("Inside leaverTriggerFlg5");
              System.out.println("inside oracle application if "+newIdentity.getAttribute("PType"));
                     //System.out.println("inside oracle application if "+newIdentity.getAttribute("rehire"));
               joinerTriggerFlg=true;
					  }
					
              //For Banner Checking if Eligible Flag should not be equal to Y
					  if(newIdentity.getAttribute("Eligible Flag")!=null &amp;&amp; newIdentity.getAttribute("Eligible Flag").equals("Y")){
               System.out.println("inside oracle application if "+newIdentity.getAttribute("Eligible Flag"));
					   joinerTriggerFlg=true;					
					   }
             
            
          //termination Date should be in the future by atlease one day
            if(newIdentity.getAttribute("terminationDate")!=null){
            String strTermDate = (String) newIdentity.getAttribute("terminationDate");
            System.out.println("inside oracle application if "+strTermDate);
            logger.debug("strTermDate : "+strTermDate);
            SimpleDateFormat sf = new SimpleDateFormat("dd/MM/yyyy");
            Date termDate = sf.parse(strTermDate);
            logger.debug(" termDate : "+termDate);
            int diff = Util.getDaysDifference(new Date(), termDate);
            logger.debug(" diff : "+diff);
             if(diff &lt; 0){
            joinerTriggerFlg = true;
            }
            }     
            
            logger.debug(" joinerTriggerFlg : "+joinerTriggerFlg);
            System.out.println(" joinerTriggerFlg : "+joinerTriggerFlg);
            return joinerTriggerFlg;</Source>
</Rule>