<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="OHSU-FieldValue-HomeDir" type="FieldValue">
  <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
  <Signature returnType="String">
    <Inputs>
      <Argument name="log" type="org.apache.commons.logging.Log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context" type="sailpoint.api.SailPointContext">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="identity" type="Identity">
        <Description>
          The Identity object that represents the user needing the field value.
        </Description>
      </Argument>
      <Argument name="link" type="Link">
        <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
      </Argument>
      <Argument name="group" type="AccountGroupDTO">
        <Description>
          The sailpoint.web.group.AccountGroupDTO that is being acted upon. If the AccountGroupDTO
          is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="project" type="ProvisioningProject">
        <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
      </Argument>
      <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
        <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
        <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="role" type="Bundle">
        <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="application" type="Application">
        <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="template" type="Template">
        <Description>
          The Template that contains this field.
        </Description>
      </Argument>
      <Argument name="field" type="Field">
        <Description>
          The current field being computed.
        </Description>
      </Argument>
      <Argument name="current" type="Object">
        <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
      </Argument>
      <Argument name="operation" type="ProvisioningPlan.Operation">
        <Description>
          The operation being performed.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="value">
        <Description>
          The string value created.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
  import sailpoint.object.*;
  import sailpoint.api.*;
  import sailpoint.tools.Util;
  import java.util.*;

  import sailpoint.object.Custom;
  import sailpoint.object.*;
  import sailpoint.api.*;

  Custom customObj = context.getObjectByName(Custom.class, "VolumeNumbers");
  
 // Identity identity = context.getObjectByName(Identity.class, "Ad User7");


  String volumeToAssign = "";
  String homeDir="\\\\ohsu.edu\\edu\\Users";


  List assignedVol = customObj.getAttributes().get("assignedVolumes");
  for(String vol:assignedVol) {
    if (customObj.getAttributes().get("identityName") == null) {

      volumeToAssign =  vol;
      assignedVol.remove(volumeToAssign);
      customObj.getAttributes().put("assignedVolumes",assignedVol);
      Map map = new HashMap();
      map.put("identityName",identity.getName());
      map.put("volume",vol);
      customObj.getAttributes().put("identityName",map);
      context.saveObject(customObj);
      context.commitTransaction();
      System.out.println("Inside identityName Null if:"+volumeToAssign);
      break;
    }

    if (!vol.equals("U206") &amp;&amp; !Util.isEmpty(customObj.getAttributes().get("identityName")) &amp;&amp; customObj.getAttributes().get("identityName").get("identityName") != null &amp;&amp; customObj.getAttributes().get("identityName").get("identityName").equals(identity.getName())){
      volumeToAssign = customObj.getAttributes().get("identityName").get("volume");
      System.out.println("Inside  if1:"+volumeToAssign);
      break;
    } else if (!vol.equals("U206") &amp;&amp; !Util.isEmpty(customObj.getAttributes().get("identityName")) &amp;&amp; customObj.getAttributes().get("identityName").get("identityName") != null &amp;&amp; !customObj.getAttributes().get("identityName").get("identityName").equals(identity.getName())){
      volumeToAssign = vol;
      assignedVol.remove(volumeToAssign);
      customObj.getAttributes().put("assignedVolumes",assignedVol);
      Map map = new HashMap();
      map.put("identityName",identity.getName());
      map.put("volume",vol);
      customObj.getAttributes().put("identityName",map);
      context.saveObject(customObj);
      context.commitTransaction();
      System.out.println("Inside else if1:"+volumeToAssign);
      break;
    } else if(vol.equals("U206") &amp;&amp; !Util.isEmpty(customObj.getAttributes().get("identityName")) &amp;&amp; customObj.getAttributes().get("identityName").get("identityName") != null &amp;&amp; customObj.getAttributes().get("identityName").get("identityName").equals(identity.getName())){
      volumeToAssign = customObj.getAttributes().get("identityName").get("volume");
      customObj.getAttributes().put("assignedVolumes",customObj.getAttributes().get("allVolumes"));
      Map map = new HashMap();
      map.put("identityName",identity.getName());
      map.put("volume",vol);
      customObj.getAttributes().put("identityName",map);
      context.saveObject(customObj);
      context.commitTransaction();
      System.out.println("Inside else if2:"+volumeToAssign);
      break;
    } else if (vol.equals("U206") &amp;&amp; !Util.isEmpty(customObj.getAttributes().get("identityName")) &amp;&amp; customObj.getAttributes().get("identityName").get("identityName") != null &amp;&amp; !customObj.getAttributes().get("identityName").get("identityName").equals(identity.getName())){
      volumeToAssign = vol;
      Map map = new HashMap();
      map.put("identityName",identity.getName());
      map.put("volume",vol);
      customObj.getAttributes().put("identityName",map);
      customObj.getAttributes().put("assignedVolumes",customObj.getAttributes().get("allVolumes"));
      context.saveObject(customObj);
      context.commitTransaction();
      System.out.println("Inside else if3:"+volumeToAssign);
      break;
    }
  }

  return homeDir+volumeToAssign+sAMAccountName;
  </Source>
</Rule>