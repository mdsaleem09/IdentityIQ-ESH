<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Hybrid Role Testing 14-12" type="Validation">
  <Description>This program will return all the objects from Identity Class</Description>
  <Source>
  import sailpoint.object.Identity;
  import sailpoint.object.*;
  import sailpoint.api.*;
  import sailpoint.object.Filter;
  import sailpoint.object.Profile;
  import sailpoint.api.IdIterator;
  import sailpoint.object.Filter.MatchMode;
  import sailpoint.tools.Util;
  
  import java.util.*;

  System.out.println("17");
  String roledisplayName = null;
  String groupName = null;
Set set=new HashSet();
  Identity idObject = context.getObjectByName(Identity.class,"spadmin");
  Filter appfilter = Filter.and(Filter.like("name", "Active-", MatchMode.START), Filter.like("name", "Demo", MatchMode.ANYWHERE));
  QueryOptions appOpts= new QueryOptions();
  appOpts.addFilter(appfilter);
  appOpts.setCloneResults(true);
  Iterator appIt = context.search(Application.class,appOpts);
  List appNames = new ArrayList();
  while(appIt.hasNext()){
      System.out.println("29");

    appNames.add(appIt.next().getName());
  }

  Iterator listIt = appNames.iterator();
  while(listIt.hasNext()){
      System.out.println("36");

    Application appObj = context.getObjectByName(Application.class,listIt.next());
    String appName= appObj.getName();  
    Identity idObject = context.getObjectByName(Identity.class,"spadmin");
    
    Filter filter = Filter.and(Filter.eq("application.name",appName));
    QueryOptions opts=new QueryOptions();
    opts.addFilter(filter);
    opts.setCloneResults(true);
    Bundle bundSAPObj = context.getObjectByName(Bundle.class,"SAP");
    
    if(bundSAPObj == null ){
        System.out.println("49");

      bundSAPObj= new Bundle();
      bundSAPObj.setName("SAP");
      bundSAPObj.setDisplayName("SAP");
      bundSAPObj.setType("organizational");   
      bundSAPObj.setOwner(idObject);
      context.saveObject(bundSAPObj);
    }

    Iterator it = context.search(ManagedAttribute.class,opts);  
    while(it.hasNext()){
        System.out.println("61");

      boolean isNewBundle = false;
      ManagedAttribute ma= (ManagedAttribute)it.next();
      
      if(ma!= null &amp;&amp; appObj.getOwner()!= null &amp;&amp;  ma.getDisplayName()!= null &amp;&amp; ma.getDisplayableName()!= null &amp;&amp;  ma.getAttribute("sysDescriptions")!= null){
          System.out.println("67");

        Map map= ma.getAttribute("sysDescriptions");
        roledisplayName= map.get("en_US");
        // Filter filter=Filter.and(Filter.eq("name",ma.getDisplayName()),Filter.eq("displayName",roledisplayName));
        Filter filter= Filter.eq("displayName",roledisplayName);
        
        Bundle bundObj= context.getUniqueObject(Bundle.class,filter);
        if(bundObj==null &amp;&amp; !set.contains(bundObj)){
                    System.out.println("76");


          bundObj= new Bundle();
              set.add(bundObj);        

          isNewBundle = true;
        }
        
        String groupName = (String) ma.getDisplayName();
        bundObj.setDisplayName(roledisplayName);
       // bundObj.setDisplayName("SAP :"+roledisplayName);
        bundObj.setName(ma.getDisplayableName());
        bundObj.setType("Hybrid");
        bundObj.setAttribute("Requestable","0");
        //Bundle orgBundle=context.getObjectByName(Bundle.class,"Org-SAP");
        bundObj.addInheritance(bundSAPObj);
      // context.saveObject(bundSAPObj);
        //bundObj.setDescription(ma.getAttribute("Long Description"));
        bundObj.setOwner(appObj.getOwner());
        
        
        
        //Iterate through all applications managed Attributes
       // Filter appfilter = Filter.and(Filter.like("name", "Active-", MatchMode.START), Filter.like("name", "Demo", MatchMode.ANYWHERE));
        Filter appfilter = Filter.like("name", "Active-");
        QueryOptions Opts=new QueryOptions();
        Opts.addFilter(appfilter);
        Iterator appIt = context.search(Application.class,Opts);
        List appNames = new ArrayList();
        while(appIt.hasNext()){
                      System.out.println("107");

          appNames.add(appIt.next().getName());
        }
        
        Iterator listit = appNames.iterator();
        while(listit.hasNext()){
                      System.out.println("114");

          Application appObj = context.getObjectByName(Application.class,listit.next());
          String appName= appObj.getName();  
          Identity idObject = context.getObjectByName(Identity.class,"spadmin");
          Filter filter = Filter.and(Filter.eq("application.name",appName));
          QueryOptions opt= new QueryOptions();
          opt.addFilter(filter);
          opt.setCloneResults(true);
          String description=null;
          IncrementalObjectIterator iT=new IncrementalObjectIterator(context,ManagedAttribute.class,opt);
          
          while(iT.hasNext()){
                        System.out.println("127");

            ManagedAttribute maObj=(ManagedAttribute)iT.next();
            Map mapOb= maObj.getAttribute("sysDescriptions");
            description= mapOb.get("en_US");
            
            if(maObj!=null &amp;&amp; maObj.getDisplayName()!=null &amp;&amp;  maObj.getAttribute()!=null &amp;&amp; maObj.getDisplayableName()!=null &amp;&amp;  description!=null &amp;&amp;  bundObj !=null &amp;&amp; bundObj.getDisplayName()!=null &amp;&amp;  description.equalsIgnoreCase(bundObj.getDisplayName())){
              
             // System.out.println("appNames:"+appObj);
                            //System.out.println("bundObj:"+bundObj.toXml());
               ArrayList list=new ArrayList();
              list.add(appObj);
              System.out.println("profiles"+bundObj.getProfilesForApplications(list));
             List profilesExist= bundObj.getProfilesForApplications(list);
              for(Profile prof:profilesExist)
              {
                System.out.println("profile "+prof.toXml());
                                System.out.println("maObj "+maObj.getValue());

                
               if(prof!=null &amp;&amp; !prof.toXml().toString().contains(maObj.getValue()))
               {
                 System.out.println("entered into if"+prof.toXml());
                 
               
              
              
              
              Application app= context.getObjectByName(Application.class,maObj.getApplication().getName());
              Profile profile=new Profile();
              profile.setApplication(app);
              List entValues = new ArrayList();
              entValues.add(maObj.getValue());
              Filter fil = Filter.containsAll(maObj.getAttribute(), entValues);
              profile.addConstraint(fil);
              bundObj.add(profile);
               context.saveObject(bundSAPObj); 
                 // context.saveObject(bundSAPObj); 
             context.saveObject(bundObj);
      context.commitTransaction();
               }
              }
      
            
            }
          }
        }
        
 
      }
              //
  
    }
              

    context.decache();
    sailpoint.tools.Util.flushIterator(it); 
  }









  </Source>
</Rule>