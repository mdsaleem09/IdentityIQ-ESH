<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="hybrid group aggregation" type="GroupAggregationRefresh">
  <Description>This rule is used to set the owner or modify the account group before it is persisted to the database.</Description>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="environment" type="Map">
        <Description>
          Arguments passed to the aggregation task.
        </Description>
      </Argument>
      <Argument name="obj" type="ResourceObject">
        <Description>
          A sailpoint.object.ResourceObject generated from the application
          and the ProvisioningPlan's ObjectRequest.
        </Description>
      </Argument>
      <Argument name="accountGroup" type="ManagedAttribute">
        <Description>
          The account group being refreshed.
        </Description>
      </Argument>
      <Argument name="groupApplication" type="Application">
        <Description>
          Application being aggregated.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="accountGroup" type="ManagedAttribute">
        <Description>
          The refreshed account group object.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>import sailpoint.object.Identity;
  import sailpoint.object.Filter;
  import sailpoint.object.Profile;
  

System.out.println("accountGroup.getDisplayableName()"+accountGroup.getDisplayableName());

if(context.getObjectByName(Bundle.class,accountGroup.getDisplayableName())!=null)
   {
     return accountGroup;
   }
  else{
Bundle bundObj=new Bundle();
bundObj.setDisplayName("Hybrid"+accountGroup.getDisplayableName());
bundObj.setName(accountGroup.getDisplayableName());
bundObj.setType("Hybrid");
  bundObj.setOwner(groupApplication.getOwner());
Profile profile1=new Profile();
profile1.setApplication(groupApplication);
List entValues1 = new ArrayList();
entValues1.add(accountGroup.getValue());
Filter f1 = Filter.containsAll(accountGroup.getAttribute(), entValues1);
          List fl1 = new ArrayList();
          fl1.add(f1);
     profile1.addConstraint(f1);
    bundObj.add(profile1);
    context.saveObject(bundObj);
    context.commitTransaction();
}</Source>
</Rule>