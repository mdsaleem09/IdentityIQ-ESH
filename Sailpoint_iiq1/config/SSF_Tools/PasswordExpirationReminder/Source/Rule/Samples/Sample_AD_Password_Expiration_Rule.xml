<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Sample AD Password Expiration Rule">
  <Signature returnType="String">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="link">
        <Description>
          The Link being inspected.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="daysTillExpiration">
        <Description>
          The number of days before password expiration. If the number is negative then password has expired, if the number is positive then a notification should be sent out, otherwise a null value is returned indicating no notification is necessary.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
    <![CDATA[
    import java.util.Calendar;
    import java.util.Date;
    import sailpoint.tools.Util;

    // Modify this CSV string to determine how may days before 
    // expiration a notification should be sent to the user
    String pwdExpReminderDays = "15,7,3,1";

    String daysTillExpiration = null;
    if (link != null) {
      List accountFlags = Util.asList(link.getAttribute("accountFlags"));
      if (Util.nullSafeContains(accountFlags, "Normal User Account") && !Util.nullSafeContains(accountFlags, "User Account is Disabled") && !Util.nullSafeContains(accountFlags, "Password Not Required") && !Util.nullSafeContains(accountFlags, "Password Cannot Expire")) {
        String pwdLastSet = link.getAttribute("pwdLastSet");
        if (Util.isNotNullOrEmpty(pwdLastSet)) {
          Date pwdAge = new Date(((Long.parseLong(pwdLastSet) - 0x19db1ded53e8000L) / 10000L));
          Calendar cal = new GregorianCalendar();
          cal.setTime(pwdAge);
          cal.add(Calendar.DAY_OF_YEAR, 90); // look up actual value or pass into rule
          int daysDiff = Util.getDaysDifference(cal.getTime(), new Date());
          String numDays = Integer.toString(daysDiff);
          
          if (daysDiff <= 0 || Util.nullSafeContains(pwdExpReminderDays, numDays)) {
            daysTillExpiration = numDays;
          }
        }
      }
    }

    return daysTillExpiration;
    ]]>
  </Source>
</Rule>