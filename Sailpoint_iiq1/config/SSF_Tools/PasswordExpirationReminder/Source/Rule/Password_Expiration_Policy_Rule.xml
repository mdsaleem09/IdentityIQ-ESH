<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell"  name="Password Expiration Policy Rule" type="Policy">
  <Description>This rule is used to determine if a Policy has been violated on change password dates.</Description>
  <Signature returnType="PolicyViolation">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="identity">
        <Description>
          The Identity being inspected.
        </Description>
      </Argument>
      <Argument name="policy">
        <Description>
          The Policy being evaluated.
        </Description>
      </Argument>
      <Argument name="constraint">
        <Description>
          The Constraint being evaluated.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="violation">
        <Description>
          The PolicyViolation object.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
    <![CDATA[
    import sailpoint.api.Workflower;
    import sailpoint.object.Application;
    import sailpoint.object.Custom;
    import sailpoint.object.Identity;
    import sailpoint.object.Link;
    import sailpoint.object.Policy;
    import sailpoint.object.PolicyViolation;
    import sailpoint.object.Rule;
    import sailpoint.object.Workflow;
    import sailpoint.object.WorkflowLaunch;

    PolicyViolation v = null;
    if (identity != null) {
      String identityName = identity.getName();
      List links = identity.getLinks();
      List alertApps = new ArrayList();
      List lockApps = new ArrayList();      
      boolean isViolation = false;

      if (links != null) {
        Application app;
        Custom pwdExpConfig = context.getObjectByName(Custom.class, "Password Expiration Configuration");
        Rule rule;
        String appName, pwdExpRule;
        Object numOfDays;
        
        if (pwdExpConfig != null) {
          for (Link link : links) {
            if (link != null && !link.isDisabled()) {
              app = link.getApplication();
              appName = (app != null) ? app.getName() : null;
              if (appName != null && pwdExpConfig.containsAttribute(appName)) {
                numOfDays = null;
                try {
                  pwdExpRule = pwdExpConfig.getString(appName);
                  rule = (pwdExpRule != null) ? context.getObjectByName(Rule.class, pwdExpRule) : null;
                  if(rule != null) {
                    Map args = new HashMap();
                    args.put("link", link);
                    numOfDays = context.runRule(rule, args);
                  }
                }
                catch (Exception e) {
                  log.error("Error determining password expiration: " + e.getMessage());
                }
                // check value of numOfDays and determine if violation or notification necessary
                if (numOfDays != null) {
                  int pwdExpDays;
                  if (numOfDays instanceof String) {
                     pwdExpDays = Integer.parseInt((String) numOfDays);
                  } else {
                     pwdExpDays = (Integer) numOfDays;                  
                  }
                  if (pwdExpDays < 0) {
                    isViolation = true;
                    // add link to list for locking
                    lockApps.add(link);
                  } else {
                    // add link to list for notification
                    alertApps.add(appName+" account "+link.getDisplayName()+" expires "+((pwdExpDays == 0) ? "today!" : "in "+numOfDays+" "+((pwdExpDays == 1) ? "day" : "days")));
                  }
                }
              }
            }
          }
        }
      }

      if (alertApps.size() > 0) {
        //call workflow without violation
        HashMap  map = new HashMap();
        map.put("launcher", "spadmin");
        map.put("alertApps", alertApps);
        map.put("identityName", identityName);
        map.put("targetClass", "sailpoint.object.Identity");
        Workflower wf = new Workflower(context);
        Workflow newWorkflow = context.getObjectByName(Workflow.class, "Password Expiration Reminder Workflow"); 
        if (newWorkflow != null) {
          WorkflowLaunch wfLaunch = wf.launchSafely(newWorkflow, "Email Expiry Reminder for "+identityName, map); 
        }
      }
      if (isViolation) {
        v = new PolicyViolation();
        v.setActive(true);
        v.setIdentity(identity);
        v.setPolicy(policy);
        v.setArgument("lockApps", lockApps);
        v.setDescription("Expired password");
        v.setStatus(sailpoint.object.PolicyViolation.Status.Open);
      }
    }

    return v;
    ]]>
  </Source>
</Rule>