package sailpoint.services.standard.emailnotifier.enhanced;

import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;

import sailpoint.api.EmailNotifier;
import sailpoint.api.SailPointContext;
import sailpoint.object.Attributes;
import sailpoint.object.Configuration;
import sailpoint.object.Custom;
import sailpoint.object.EmailOptions;
import sailpoint.object.EmailTemplate;
import sailpoint.object.Filter;
import sailpoint.object.Identity;
import sailpoint.object.QueryOptions;
import sailpoint.object.TaskResult;
import sailpoint.object.TaskSchedule;
import sailpoint.server.SMTPEmailNotifier;
import sailpoint.task.AbstractTaskExecutor;
import sailpoint.tools.GeneralException;
import sailpoint.tools.Util;

public class EnhancedSummaryProcessor extends AbstractTaskExecutor {
	private static Logger log = Logger.getLogger(EnhancedSummaryProcessor.class);
	private TaskResult result = null;
	private SailPointContext context;
	private TaskSchedule taskSchedule = null;
	private int totalEmailsSent = 0;
	private boolean terminate = false;

	private static final String ATTR_SUMMRY_DEBUG_MODE = "summaryDebugMode";

	// Email options additional attributes generated by this class
	private static final String EMAIL_OPTIONS_ATTR_IDENTITY = "identity";
	private static final String EMAIL_OPTIONS_ATTR_DATE_NOW = "dateNow";
	private static final String EMAIL_OPTIONS_ATTR_RENDER_HINTS = "renderHints";

	public void execute(SailPointContext context, TaskSchedule taskSchedule, TaskResult taskResult,	Attributes<String, Object> attributes) throws GeneralException {
		
		log.debug("Entering execute");

		this.terminate = false;
		this.result = taskResult;
		this.context = context;
		this.taskSchedule = taskSchedule;
		
		String templateName = null;
		boolean debugMode = false;
		
		if (attributes.containsKey(ATTR_SUMMRY_DEBUG_MODE)) debugMode = attributes.getBoolean(ATTR_SUMMRY_DEBUG_MODE, false);
		
		Configuration config = EnhancedNotifier.getConfiguration(context);
		if (config.containsKey(EnhancedNotifier.CONFIG_ATTRIBUTE_SUMMARY_EMAIL_TEMPLATE_NAME)) templateName = config.getString(EnhancedNotifier.CONFIG_ATTRIBUTE_SUMMARY_EMAIL_TEMPLATE_NAME);
		if (templateName == null) throw new GeneralException("Summary template has not been set on task definition: " + EnhancedNotifier.CONFIG_ATTRIBUTE_SUMMARY_EMAIL_TEMPLATE_NAME);		
		EmailTemplate summaryEmailTemplate = (EmailTemplate) context.getObjectByName(EmailTemplate.class, templateName);
		if (summaryEmailTemplate == null) throw new GeneralException("Cannot find email template '" + templateName + "' to render summary information");
		
		updateProgress(context, this.result, "Initializing", 0);

		QueryOptions qo = new QueryOptions(new Filter[] { Filter.like("name", EnhancedNotifier.SUMMARY_NAME_PREFIX,	Filter.MatchMode.START) });

		List<String> returnFields = Arrays.asList(new String[] { "name" });
		Iterator<Object[]> it = context.search(Custom.class, qo, returnFields);

		long interval = getNextInterval();

		// Instantiate the SMTP email class for sending
		EmailNotifier smtpEmail = Tools.getEmailNotifierClass();
		
		while (it.hasNext()) {
			
			// Check to se if the use attempted to terminate this task
			if (this.terminate) {
				this.result.setTerminated(this.terminate);
				break;
			}
			String objectName = (String) ((Object[]) it.next())[0];
			Custom summary = (Custom) context.getObjectByName(Custom.class, objectName);
			if (summary != null) {
				
				if (log.isDebugEnabled()) log.debug("  Processing object: " + objectName);
				
				EmailOptions eo = new EmailOptions();
				eo.setTo((String) summary.get("to"));
			
				Attributes<String, Object> attrs = summary.getAttributes();
				for (String key : attrs.keySet()) {
					if (log.isDebugEnabled()) log.debug("Adding variable: '" + key + "' to velocity template for rendering.");
					eo.setVariable(key, attrs.get(key));
					
				}
				// add some baseline values which may be useful in the template
				eo.setVariable("ignoreTemplateCheck", Boolean.valueOf(true));
				Identity identity = EnhancedNotifier.getIdentityByEmailAddress(context, summary.getString("to"));
				
				eo.setVariable(EMAIL_OPTIONS_ATTR_IDENTITY, identity );
				eo.setVariable(EMAIL_OPTIONS_ATTR_DATE_NOW, new Date());
				eo.setVariable(EnhancedNotifier.SUMMARY_MAP_CREATED_DATE, summary.getCreated());
				
				// Add the basline Server Root Path, try and get it from the System Config, if not then try the 
				// Enhanced Email notification config, then if not use the default
				String serverRootPath = null;
				// Avoiding using Configuration.SERVER_ROOT_PATH as the lookup value as it may not exist
				serverRootPath = context.getConfiguration().getString("serverRootPath");
				if (serverRootPath == null) EnhancedNotifier.getConfiguration(context).getString(EnhancedNotifier.CONFIG_ATTRIBUTE_SUMMARY_SERVER_ROOT_PATH);
				if (serverRootPath == null) serverRootPath = EnhancedNotifier.DEFAULT_SUMMARY_SERVER_ROOT_PATH;
				if (log.isDebugEnabled()) log.debug("Server root path: " + serverRootPath);
				
				// Add it to the email template variable list
				eo.setVariable(EnhancedNotifier.CONFIG_ATTRIBUTE_SUMMARY_SERVER_ROOT_PATH, serverRootPath);
				
				// Now add any rendering tips to the email template
				eo.setVariable(EMAIL_OPTIONS_ATTR_RENDER_HINTS, config.get(EnhancedNotifier.CONFIG_ATTRIBUTE_SUMMARY_TEMPLATE_FILTER_MAP));
				
				// Send the evaluator
				VelocityEvaluator velocityEvaluator = new VelocityEvaluator();
				eo.setVariable("velocityEvaluator", velocityEvaluator);
				
				log.debug("Sending Email Options: ");
				
				EmailTemplate email = summaryEmailTemplate.compile(context, context.getConfiguration(), eo);

				eo.setVariable("velocityEvaluator", null);
				
				// Send via SMTP
				if (log.isDebugEnabled())
					log.debug("  Sending Template to SMTPEmailNotifier: " + email.getName());
				
				// Remove the velocity helper class just in case
				

				smtpEmail.sendEmailNotification(context, email, eo);

				//
				// If we are in debug mode, then the assumption is we are testing the templates out
				// so lets not remove the test data
				//
				
				if (!debugMode) {
	
					try {
						context.removeObject(summary);
						context.commitTransaction();
						context.decache(summary);
					} catch (GeneralException e) {
						log.warn("Error when removing object: " + e.getMessage(),e);
					}
					
				}
				
				this.totalEmailsSent += 1;
			} else {
				throw new GeneralException("Cannot find summary custom object " + objectName + "!");
			}
			if (System.currentTimeMillis() > interval) {
				interval = getNextInterval();
				updateProgress(context, this.result, "Processing object " + objectName, 0);
			}
		}

		// if the iterator has not finished, then flush it.
		if (it.hasNext())
			Util.flushIterator(it);

		this.result.put("totalEmailsSent", Integer.valueOf(this.totalEmailsSent));
		this.result.setCompleted(new Date());

		updateProgress(context, this.result, "Finished", 100);
		log.debug("Exiting execute");
	}

	private long getNextInterval() {
		int progressInterval = this.taskSchedule.getDefinition().getEffectiveProgressInterval();
		if (progressInterval < 1) {
			progressInterval = 1;
		}
		return System.currentTimeMillis() + progressInterval * 1000;
	}

	public boolean terminate() {
		this.terminate = true;
		return true;
	}
}