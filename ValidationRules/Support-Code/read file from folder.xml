<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="call workflow" type="Validation">
  <Source>
  import java.util.List;
  import java.util.ArrayList;
  import java.util.HashMap;
  import java.io.File;
  import java.io.FileReader;
  import java.io.BufferedReader;
  import java.io.BufferedWriter;

  import sailpoint.object.Identity;
  import sailpoint.object.Workflow;
  import sailpoint.object.WorkflowLaunch;
  import sailpoint.api.Workflower;
  import sailpoint.api.SailPointContext;
  import sailpoint.tools.Message;
  import sailpoint.object.TaskResult;
  import sailpoint.object.TaskResult.CompletionStatus;

  try{

    File folder = new File("C:\\data");
    File f = null;
    File[] listOfFiles = folder.listFiles();

    for (File file : listOfFiles) 
    {
      if (file.isFile()) 
      {
        f=file;
		break;
      }
    }

    if(f.exists())
    {
      FileReader myreader = new FileReader(f);
      BufferedReader br=new BufferedReader(myreader);
      String line;
      List li = new ArrayList();
      while ((line = br.readLine()) != null) 
      {
        Identity id=context.getObjectByName(Identity.class,line);
        HashMap launchArgsMap = new HashMap();
        launchArgsMap.put("identityName", id.getName());
        launchArgsMap.put("approvalScheme", "none");        
        WorkflowLaunch wflaunch = new WorkflowLaunch();
        Workflow wf = context.getObjectByName(Workflow.class,"My-LeaverAD");
        if (wf != null) {
          wflaunch.setWorkflowName(wf.getName());
          wflaunch.setWorkflowRef(wf.getName());
          wflaunch.setVariables(launchArgsMap);
          Workflower workflower = new Workflower(context);
          WorkflowLaunch launch = workflower.launch(wflaunch);
        }
      }
      
      String name = taskResult.getName();
      if (taskResult != null)
      {

        if(taskResult.calculateCompletionStatus().toString().equalsIgnoreCase("Success"))
        {
          taskResult.addMessage(name+" Task is Executed Successfully");
          context.saveObject(taskResult);
          context.commitTransaction();
        }
        else if(taskResult.calculateCompletionStatus().toString().equalsIgnoreCase("Error"))
        {
          taskResult.addMessage(name+" Task is Error");
          context.saveObject(taskResult);
          context.commitTransaction();
        }
      

      }

      else
      {

        Message msg = new Message(Message.Type.Error,f.getName()+"Does not exist",new Object[] {});
        taskResult.addMessage(msg);
        context.saveObject(taskResult);
        context.commitTransaction();

      }
    
	}
  } 

  catch(Exception e)
  {

    e.printStackTrace();

  }


  </Source>
</Rule>
