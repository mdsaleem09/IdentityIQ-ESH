<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Test - Ad Hoc Leaver Trigger" type="Validation">
  <Source>
  import sailpoint.object.Identity;
  import sailpoint.object.IdentityChangeEvent;
  import sailpoint.object.IdentityTrigger;
  import sailpoint.object.Workflow;
  import sailpoint.object.WorkflowLaunch;
  import sailpoint.api.Workflower;
  import sailpoint.api.SailPointContext;
  import java.util.List;
  import java.util.ArrayList;
  import java.util.HashMap;
  import java.io.BufferedReader;
  import java.io.File;
  import java.io.FileReader;
  import java.io.IOException;
  import sailpoint.object.TaskResult;
  import sailpoint.object.TaskResult.CompletionStatus;
  import sailpoint.tools.Message;
  import org.apache.log4j.Logger;
  import org.apache.log4j.Level;
  import org.apache.commons.logging.LogFactory;

  String msgSeparator = "*********************************************";
  System.out.println("The ADHocLeaverTrigger:********Initial");
  // log.trace("***********Entering Rule-Ad Hoc Leaver Trigger Rule **********");

  String identityName="";
  try{
    File folder = new File("C:\\data");
    File f = null;
    File[] listOfFiles = folder.listFiles();

    for (File file : listOfFiles)
    {
      if (file.isFile())
      {
        f=file;
      }
    }
    if(f.exists())
    {
      FileReader myreader = new FileReader(f);
      BufferedReader br=new BufferedReader(myreader);
      String line=br.readLine();
      System.out.println("saleemLine"+line);
      if(line==null )
       {
          Message msg1 = new Message(Message.Type.Error,"is an empty file",new Object[] {});
          taskResult.addMessage(msg1);
          context.saveObject(taskResult);
          context.commitTransaction();
          
       }
     
      while (line  != null)
      {
        identityName = line;
        
        Identity id=context.getObjectByName(Identity.class,identityName);

        if(id==null)
        {
          Message msg1 = new Message(Message.Type.Error,identityName+" is not a valid identity",new Object[] {});
          taskResult.addMessage(msg1);
          context.saveObject(taskResult);
          context.commitTransaction();
          break;
        }
        else if(id!=null)
        {
          IdentityChangeEvent event = new IdentityChangeEvent();
          IdentityTrigger trigger = new IdentityTrigger();

          HashMap launchArgsMap = new HashMap();
          launchArgsMap.put("identityName", id.getName());
          launchArgsMap.put("approvalScheme", "none");
          launchArgsMap.put("trigger", trigger);
          launchArgsMap.put("event", event);

          WorkflowLaunch wflaunch = new WorkflowLaunch();
          Workflow wf = context.getObjectByName(Workflow.class, "My-LeaverAD");
          if (wf != null) 
          {
            wflaunch.setWorkflowName(wf.getName());
            wflaunch.setWorkflowRef(wf.getName());
            wflaunch.setVariables(launchArgsMap);
            Workflower workflower = new Workflower(context);
            WorkflowLaunch launch = workflower.launch(wflaunch);
          }
        }




      
      }
        
      myreader.close();
      br.close();
      if(id!=null)
      {
        f.delete();
      }
       
      }   

    

    else
    {
      Message msg = new Message(Message.Type.Error,f.getName()+"does not exist",new Object[] {});
      taskResult.addMessage(msg);
      context.saveObject(taskResult);
      context.commitTransaction();
    }

    if (taskResult != null) {
      String name = taskResult.getName();

      if(taskResult.calculateCompletionStatus().toString().equalsIgnoreCase("Success"))
      {
        taskResult.addMessage(name+" Task Executed Successfully for "+" "+identityName);


        context.saveObject(taskResult);
        context.commitTransaction();
      }
      else if(taskResult.calculateCompletionStatus().toString().equalsIgnoreCase("Error"))
      {
        taskResult.addMessage(name+" Task finished with status Error"+" "+identityName);
        context.saveObject(taskResult);
        context.commitTransaction();
      }
      else
      {
        taskResult.addMessage(name + " failed with: " +taskResult.calculateCompletionStatus().toString());
        context.saveObject(taskResult);
        context.commitTransaction();
        return "Task Failed";
      }
    }


  }

  catch(IOException ie) {
    ie.printStackTrace();
  }

  </Source>
</Rule>
