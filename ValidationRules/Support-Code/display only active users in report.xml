<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE TaskDefinition PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<TaskDefinition created="" executor="sailpoint.reporting.LiveReportExecutor" id="" modified="" name="Identity Entitlements Detail Report" progressMode="Percentage" resultAction="Rename" subType="Identity and User Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Identity Entitlements Report">
            <DataSource objectType="IdentityEntitlement" type="Filter">
              <QueryParameters>
                <Parameter argument="identity" property="identity.id">
                  <QueryScript>
                    <Source>
                      import sailpoint.object.*;
                      import sailpoint.api.*;


                      QueryOptions options = new QueryOptions();
                      Filter myFilter1=Filter.eq("application.name", "AD Application");
                      options.addFilter(myFilter1);
                      List activeLinkList= new ArrayList();
                      List linkList= new ArrayList();
                      linkList=context.getObjects(Link.class,options);
                      for(Link link : linkList){
                      System.out.println("link.disabled is : " + link.isDisabled());
                      System.out.println("link" + link.toXml());
                      if(!link.isDisabled())
                      {

                      Identity ids=context.getObjectByName(Identity.class,link.getDisplayName());
                      if(ids!=null)
                      {
                      activeLinkList .add(ids.getId());
                      }
                      }
                      }

                      if(activeLinkList.size() > 0)
                      {

                      queryOptions.addFilter(Filter.in("identity.id", activeLinkList));
                      }
                      return queryOptions;
                    </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="application" property="application.id"/>
                <Parameter argument="attribute" property="name"/>
                <Parameter argument="entitlementValue" property="value"/>
                <Parameter argument="accountId" property="nativeIdentity"/>
                <Parameter argument="instance" property="instance"/>
                <Parameter argument="source" property="source"/>
                <Parameter argument="aggregationState" property="aggregationState">
                  <QueryScript>
                    <Source>
                      import sailpoint.object.Filter;
                      import sailpoint.object.IdentityEntitlement.AggregationState;
                      import sailpoint.tools.Util;

                      // "null" indicates include all
                      if ( Util.getString((String)value) != null ) {
                      if ( Util.nullSafeEq("Connected", (String)value) ) {
                      queryOptions.addFilter(Filter.eq("aggregationState", AggregationState.Connected));                                   
                      } else {
                      queryOptions.addFilter(Filter.eq("aggregationState", AggregationState.Disconnected));
                      }
                      }
                      return queryOptions;
                    </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="type" property="type">
                  <QueryScript>
                    <Source>
                      import sailpoint.object.Filter;
                      import sailpoint.object.IdentityEntitlement.AggregationState;
                      import sailpoint.tools.Util;

                      // "null" indicates include all
                      if ( Util.getString((String)value) != null ) {
                      queryOptions.addFilter(Filter.eq("type", value));                                   
                      }
                      return queryOptions;
                    </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="allowed" property="allowed" valueClass="boolean"/>
                <Parameter argument="assigned" property="assigned" valueClass="boolean"/>
                <Parameter argument="grantedByRole" property="grantedByRole" valueClass="boolean"/>
                <Parameter argument="assigner" property="assigner"/>
                <Parameter argument="pendingRequest" property="pendingRequestItem">
                  <QueryScript>
                    <Source>
                      import sailpoint.object.*;
                      import sailpoint.tools.*;

                      // "null" indicates no value
                      if ( Util.getString((String)value) != null ) {
                      boolean bool = Util.otob(value);
                      if ( !bool ) 
                      queryOptions.addFilter(Filter.isnull(property));
                      else 
                      queryOptions.addFilter(Filter.notnull(property));

                      }
                      return queryOptions;
                    </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="currentRequest" property="requestItem">
                  <QueryScript>
                    <Source>
                      import sailpoint.object.*;
                      import sailpoint.tools.*;

                      // "null" indicates no value
                      if ( Util.getString((String)value) != null ) {
                      boolean bool = Util.otob(value);
                      if ( !bool ) 
                      queryOptions.addFilter(Filter.isnull(property));
                      else 
                      queryOptions.addFilter(Filter.notnull(property));

                      }
                      return queryOptions;
                    </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="pendingCertification" property="pendingCertificationItem">
                  <QueryScript>
                    <Source>
                      import sailpoint.object.*;
                      import sailpoint.tools.*;

                      // "null" indicates no value
                      if ( Util.getString((String)value) != null ) {
                      boolean bool = Util.otob(value);
                      if ( !bool ) 
                      queryOptions.addFilter(Filter.isnull(property));
                      else 
                      queryOptions.addFilter(Filter.notnull(property));

                      }
                      return queryOptions;
                    </Source>
                  </QueryScript>
                </Parameter>
                <Parameter argument="certified" property="certificationItem">
                  <QueryScript>
                    <Source>
                      import sailpoint.object.*;
                      import sailpoint.tools.*;

                      // "null" indicates no value
                      if ( Util.getString((String)value) != null ) {
                      boolean bool = Util.otob(value);
                      if ( !bool ) 
                      queryOptions.addFilter(Filter.isnull(property));
                      else 
                      queryOptions.addFilter(Filter.notnull(property));

                      }
                      return queryOptions;
                    </Source>
                  </QueryScript>
                </Parameter>
              </QueryParameters>
            </DataSource>
            <ReportForm>
              <Reference class="sailpoint.object.Form" id="" name="Identity Entitlements Report Search Fields"/>
            </ReportForm>
            <Columns>
              <ReportColumnConfig field="EmployeeID" header="EmployeeID" property="identity.EmployeeID" sortable="true" width="110"/>
              <ReportColumnConfig field="firstname" header="firstname" property="identity.firstname" sortable="true" width="110"/>
              <ReportColumnConfig field="lastname" header="lastname" property="identity.lastname" sortable="true" width="110"/>
              <ReportColumnConfig field="value" header="entitlement" property="value" sortable="true" width="110"/>
            </Columns>
           
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays identity/account entitlement information.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" id="" name="FullAccessIdentityEntitlementReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="identity" type="Identity">
        <Description>Identities to include in the report</Description>
        <Prompt>identities</Prompt>
      </Argument>
      <Argument multi="true" name="application" type="Application">
        <Description>Applications to include in the report</Description>
        <Prompt>applications</Prompt>
      </Argument>
      <Argument multi="true" name="attribute">
        <Description>Attirubtes to include in the report</Description>
        <Prompt>attribute</Prompt>
      </Argument>
      <Argument multi="true" name="entitlementValue">
        <Description>Attirubtes to include in the report</Description>
        <Prompt>attribute</Prompt>
      </Argument>
      <Argument name="accountId">
        <Description>Account ids to include in the report</Description>
        <Prompt>account_name</Prompt>
      </Argument>
      <Argument name="instance">
        <Description>Instances to include</Description>
        <Prompt>instance</Prompt>
      </Argument>
      <Argument name="source" type="string">
        <Description>Include only Entitlements with a specific source</Description>
        <Prompt>identity_entitlements_source</Prompt>
      </Argument>
      <Argument name="aggregationState" type="string">
        <Description>Include only connected or disconnected entitlements</Description>
        <Prompt>identity_entitlements_aggregation_state_display</Prompt>
      </Argument>
      <Argument name="type" type="string">
        <Description>Include only certain types of permissions. Either Permission or Entitlement</Description>
        <Prompt>srch_input_def_entitlement_type</Prompt>
      </Argument>
      <Argument name="allowed" type="string">
        <Description>Include only allowed entitlements</Description>
        <Prompt>identity_entitlements_role_allowed</Prompt>
      </Argument>
      <Argument name="assigned" type="string">
        <Description>Include only entitlements that are assigned</Description>
        <Prompt>identity_entitlements_assigned</Prompt>
      </Argument>
      <Argument name="grantedByRole" type="string">
        <Description>Include only entitlements granted by a role.</Description>
        <Prompt>granted</Prompt>
      </Argument>
      <Argument name="pendingRequest" type="string">
        <Description>Include only entitlements that have a pending access request.</Description>
        <Prompt>pendingRequest</Prompt>
      </Argument>
      <Argument name="currentRequest" type="string">
        <Description>Include only entitlements that have a current access request.</Description>
        <Prompt>pendingRequest</Prompt>
      </Argument>
      <Argument name="pendingCertification" type="string">
        <Description>Include only entitlements that have a pending certification.</Description>
        <Prompt>pendingCertification</Prompt>
      </Argument>
      <Argument name="certified" type="string">
        <Description>Include only entitlements that have been certified.</Description>
        <Prompt>certified</Prompt>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
